name: Deploy WIP Branch
on:
  push:
    branches:
      - '*'
      - '!main'
  workflow_dispatch:
    inputs:
      BEARER_TOKEN:
        description: 'Credentials'
        required: true
        default: 'ZGdueDp3YWdtaTIwMjQ='
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-

      - name: Install dependencies
        run: npm ci --force --ignore-scripts

      - name: Build
        run: npm run build
        env:
          NEXT_PUBLIC_API_ENDPOINT: ${{ vars.NEXT_PUBLIC_API_ENDPOINT }}
          NEXT_PUBLIC_BACKING_API_ENDPOINT: ${{ vars.NEXT_PUBLIC_BACKING_API_ENDPOINT }}
          NEXT_PUBLIC_CONTROLLER_ADDRESS: ${{ vars.NEXT_PUBLIC_CONTROLLER_ADDRESS }}
          NEXT_PUBLIC_USDC_ADDRESSES: ${{ vars.NEXT_PUBLIC_USDC_ADDRESSES }}
          NEXT_PUBLIC_RPC: ${{ vars.NEXT_PUBLIC_RPC }}
          NEXT_PUBLIC_CHAIN_ID: ${{ vars.NEXT_PUBLIC_CHAIN_ID }}
          NEXT_PUBLIC_NAME: ${{ vars.NEXT_PUBLIC_NAME }}
          NEXT_PUBLIC_TOKEN_ADDRESS: ${{ vars.NEXT_PUBLIC_TOKEN_ADDRESS }}
          NEXT_PUBLIC_WALLET_CONNECT_PROJECT_ID: ${{ vars.NEXT_PUBLIC_WALLET_CONNECT_PROJECT_ID }}
          NEXT_PUBLIC_INFURA_ID: ${{ vars.NEXT_PUBLIC_INFURA_ID }}
          NEXT_PUBLIC_BOUNCER_VERIFICATION_DATA: ${{ vars.NEXT_PUBLIC_BOUNCER_VERIFICATION_DATA }}
          NEXT_PUBLIC_BOUNCER_VERIFY_WALLET: ${{ vars.NEXT_PUBLIC_BOUNCER_VERIFY_WALLET }}
          NEXT_PUBLIC_BOUNCER_FINISH_VERIFICATION: ${{ vars.NEXT_PUBLIC_BOUNCER_FINISH_VERIFICATION }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          NEXT_PUBLIC_ENABLE_TESTNETS: ${{ vars.NEXT_PUBLIC_ENABLE_TESTNETS }}
          NEXT_PUBLIC_STAKEX_API_ENDPOINT: ${{ vars.NEXT_PUBLIC_STAKEX_API_ENDPOINT }}
          NEXT_PUBLIC_DEGENX_BACKEND_API_ENDPOINT: ${{ vars.NEXT_PUBLIC_DEGENX_BACKEND_API_ENDPOINT }}
          NEXT_PUBLIC_SENTRY_DSN: ${{ vars.NEXT_PUBLIC_SENTRY_DSN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.DGNX_WEBSITE_AWS_ACCOUNT_ID }}
          aws-secret-access-key: ${{ secrets.DGNX_WEBSITE_AWS_ACCOUNT_KEY }}
          aws-region: eu-west-1

      - name: Deploy Cloud Formation
        # if: github.event_name == 'workflow_dispatch' && github.event.inputs.BEARER_TOKEN != ''
        # run: aws cloudformation deploy --template-file "${TEMPLATE_FILE}" --stack-name "${STACK_NAME}" --parameter-overrides Base64UserPass="${BEARER_TOKEN}" CustomBucketName="${CUSTOM_BUCKET_NAME}"
        run: aws cloudformation deploy --template-file "${TEMPLATE_FILE}" --stack-name "${STACK_NAME}" --parameter-overrides CustomBucketName="${CUSTOM_BUCKET_NAME}"
        env:
          STACK_NAME: degenx-dapp-${{github.ref_name}}
          TEMPLATE_FILE: ${{github.workspace}}/.deployment/wip.cf.yml
          # BEARER_TOKEN: ZGdueDp3YWdtaTIwMjQ=
          CUSTOM_BUCKET_NAME: s3-${{github.ref_name}}

      # - name: Validate Cloud Formation Template
      #   run: aws cloudformation validate-template --template-body file://${{github.workspace}}/.deployment/wip.cf.yml
      #   env:
      #     Base64UserPass: 'ZGdueDp3YWdtaTIwMjQ='

      - name: Deploy Static Site To S3 Bucket
        run: aws s3 sync ./out/ s3://s3-${{github.ref_name}}/ --delete

      - name: Provide URL
        run: aws cloudformation describe-stacks --stack-name "degenx-dapp-${{github.ref_name}}" --query "Stacks[0].Outputs[?OutputKey=='StaticWebsiteHostname'].OutputValue" --output text
