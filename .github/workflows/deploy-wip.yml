name: Deploy WIP Branch
on:
  push:
    branches:
      - '*'
      - '!main'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-

      - name: Install dependencies
        run: npm ci --force --ignore-scripts

      - name: Build
        run: npm run build
        env:
          NEXT_PUBLIC_API_ENDPOINT: ${{ vars.NEXT_PUBLIC_API_ENDPOINT }}
          NEXT_PUBLIC_BACKING_API_ENDPOINT: ${{ vars.NEXT_PUBLIC_BACKING_API_ENDPOINT }}
          NEXT_PUBLIC_CONTROLLER_ADDRESS: ${{ vars.NEXT_PUBLIC_CONTROLLER_ADDRESS }}
          NEXT_PUBLIC_USDC_ADDRESSES: ${{ vars.NEXT_PUBLIC_USDC_ADDRESSES }}
          NEXT_PUBLIC_RPC: ${{ vars.NEXT_PUBLIC_RPC }}
          NEXT_PUBLIC_CHAIN_ID: ${{ vars.NEXT_PUBLIC_CHAIN_ID }}
          NEXT_PUBLIC_NAME: ${{ vars.NEXT_PUBLIC_NAME }}
          NEXT_PUBLIC_TOKEN_ADDRESS: ${{ vars.NEXT_PUBLIC_TOKEN_ADDRESS }}
          NEXT_PUBLIC_WALLET_CONNECT_PROJECT_ID: ${{ vars.NEXT_PUBLIC_WALLET_CONNECT_PROJECT_ID }}
          NEXT_PUBLIC_INFURA_ID: ${{ vars.NEXT_PUBLIC_INFURA_ID }}
          NEXT_PUBLIC_ALCHEMY_API_KEY: ${{ vars.NEXT_PUBLIC_ALCHEMY_API_KEY }}
          NEXT_PUBLIC_BOUNCER_VERIFICATION_DATA: ${{ vars.NEXT_PUBLIC_BOUNCER_VERIFICATION_DATA }}
          NEXT_PUBLIC_BOUNCER_VERIFY_WALLET: ${{ vars.NEXT_PUBLIC_BOUNCER_VERIFY_WALLET }}
          NEXT_PUBLIC_BOUNCER_FINISH_VERIFICATION: ${{ vars.NEXT_PUBLIC_BOUNCER_FINISH_VERIFICATION }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          NEXT_PUBLIC_ENABLE_TESTNETS: ${{ vars.NEXT_PUBLIC_ENABLE_TESTNETS }}
          NEXT_PUBLIC_STAKEX_API_ENDPOINT: ${{ vars.NEXT_PUBLIC_STAKEX_API_ENDPOINT }}
          NEXT_PUBLIC_DEGENX_BACKEND_API_ENDPOINT: ${{ vars.NEXT_PUBLIC_DEGENX_BACKEND_API_ENDPOINT }}
          NEXT_PUBLIC_SENTRY_DSN: ${{ vars.NEXT_PUBLIC_SENTRY_DSN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.DGNX_WEBSITE_AWS_ACCOUNT_ID }}
          aws-secret-access-key: ${{ secrets.DGNX_WEBSITE_AWS_ACCOUNT_KEY }}
          aws-region: eu-west-1

      - name: Deploy Cloud Formation & Static Website
        id: deploy-website-bucket
        run: |
          aws cloudformation deploy --template-file "${TEMPLATE_FILE}" --stack-name "${STACK_NAME}" --parameter-overrides CustomBucketName="${CUSTOM_BUCKET_NAME}"
          echo "WEBSITE_URL=$(aws cloudformation describe-stacks --stack-name "${STACK_NAME}" --query "Stacks[0].Outputs[?OutputKey=='StaticWebsiteHostname'].OutputValue" --output text)"
          echo "WEBSITE_URL=$(aws cloudformation describe-stacks --stack-name "${STACK_NAME}" --query "Stacks[0].Outputs[?OutputKey=='StaticWebsiteHostname'].OutputValue" --output text)" >> "$GITHUB_OUTPUT"
          aws s3 sync ./out/ s3://${CUSTOM_BUCKET_NAME}/ --delete
        env:
          STACK_NAME: degenx-dapp-${{github.ref_name}}
          TEMPLATE_FILE: ${{github.workspace}}/.deployment/wip.cf.yml
          CUSTOM_BUCKET_NAME: s3-${{github.ref_name}}

      # - name: Validate Cloud Formation Template
      #   run: aws cloudformation validate-template --template-body file://${{github.workspace}}/.deployment/wip.cf.yml
      #   env:
      #     Base64UserPass: 'ZGdueDp3YWdtaTIwMjQ='

      ### DEPLOY LANDINGPAGES
      ## STKX.IO
      - name: Deploy stkx.io Cloud Formation & Static Website
        id: deploy-stkx-bucket
        run: |
          aws cloudformation deploy --template-file "${TEMPLATE_FILE}" --stack-name "${STACK_NAME}" --parameter-overrides RootDomainName="${ROOT_DOMAIN_NAME}"
          echo "WEBSITE_URL_WITHOUT_PROTOCOL=$(aws cloudformation describe-stacks --stack-name "${STACK_NAME}" --query "Stacks[0].Outputs[?OutputKey=='WebsiteURLWithoutProtocol'].OutputValue" --output text)" >> "$GITHUB_OUTPUT"
          echo "WEBSITE_URL=$(aws cloudformation describe-stacks --stack-name "${STACK_NAME}" --query "Stacks[0].Outputs[?OutputKey=='WebsiteURL'].OutputValue" --output text)" >> "$GITHUB_OUTPUT"
          aws s3 sync ./out/ s3://${ROOT_DOMAIN_NAME}/ --delete
          aws s3 sync ./out/lps/stakex/ s3://${ROOT_DOMAIN_NAME}/
        env:
          STACK_NAME: stkx-review-${{github.ref_name}}
          TEMPLATE_FILE: ${{github.workspace}}/.deployment/s3-static-site.cf.yml
          ROOT_DOMAIN_NAME: review.${{github.ref_name}}.stkx.io

      - name: Update CloudFlare DNS records for review env stkx.io
        uses: rez0n/create-dns-record@v2.1
        with:
          type: 'CNAME'
          name: 'review.${{github.ref_name}}.stkx.io'
          content: ${{ steps.deploy-stkx-bucket.outputs.WEBSITE_URL_WITHOUT_PROTOCOL }}
          ttl: 1
          proxied: true
          token: ${{ secrets.CLOUDFLARE_TOKEN }}
          zone: ${{ secrets.CLOUDFLARE_ZONE }}

      - name: URLs
        run: |
          echo "dgnx.finance Review URL: ${URL_DGNX_FINANCE}"
          echo "stkx.io Review URL: ${URL_STAKEX_LP}"
        env:
          URL_DGNX_FINANCE: ${{ steps.deploy-website-bucket.outputs.WEBSITE_URL }}
          URL_STKX_IO: ${{ steps.deploy-stkx-bucket.outputs.WEBSITE_URL }}
