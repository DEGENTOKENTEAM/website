/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface VaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "ROLE_CONTROLLER"
      | "ROLE_GOVERNANCE"
      | "ROLE_GOVERNOR"
      | "allAssets"
      | "assets"
      | "balanceOf"
      | "countAssets"
      | "deposit"
      | "depositFrom"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "grantRole"
      | "hasAsset"
      | "hasRole"
      | "initialize"
      | "recoverAsset"
      | "registerAsset"
      | "renounceRole"
      | "revokeAsset"
      | "revokeRole"
      | "supportsInterface"
      | "withdraw"
      | "withdrawTo"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DepositAsset"
      | "DepositAssetFailed"
      | "Initialized"
      | "RecoveredAsset"
      | "RecoveredAssetFailed"
      | "RegisterAssetToVault"
      | "RevokeAssetFromVault"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "WithdrawAsset"
      | "WithdrawAssetFailed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_CONTROLLER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_GOVERNANCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_GOVERNOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "assets", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "countAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAsset",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverAsset",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAsset",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAsset",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTo",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_CONTROLLER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_GOVERNANCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_GOVERNOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allAssets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "countAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasAsset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdrawTo", data: BytesLike): Result;
}

export namespace DepositAssetEvent {
  export type InputTuple = [
    assetAddress: AddressLike,
    assetAmount: BigNumberish,
    depositer: AddressLike
  ];
  export type OutputTuple = [
    assetAddress: string,
    assetAmount: bigint,
    depositer: string
  ];
  export interface OutputObject {
    assetAddress: string;
    assetAmount: bigint;
    depositer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositAssetFailedEvent {
  export type InputTuple = [
    assetAddress: AddressLike,
    assetAmount: BigNumberish,
    depositer: AddressLike
  ];
  export type OutputTuple = [
    assetAddress: string,
    assetAmount: bigint,
    depositer: string
  ];
  export interface OutputObject {
    assetAddress: string;
    assetAmount: bigint;
    depositer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecoveredAssetEvent {
  export type InputTuple = [
    assetAddress: AddressLike,
    assetAmount: BigNumberish,
    receiver: AddressLike
  ];
  export type OutputTuple = [
    assetAddress: string,
    assetAmount: bigint,
    receiver: string
  ];
  export interface OutputObject {
    assetAddress: string;
    assetAmount: bigint;
    receiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecoveredAssetFailedEvent {
  export type InputTuple = [
    assetAddress: AddressLike,
    assetAmount: BigNumberish,
    receiver: AddressLike
  ];
  export type OutputTuple = [
    assetAddress: string,
    assetAmount: bigint,
    receiver: string
  ];
  export interface OutputObject {
    assetAddress: string;
    assetAmount: bigint;
    receiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegisterAssetToVaultEvent {
  export type InputTuple = [assetAddress: AddressLike];
  export type OutputTuple = [assetAddress: string];
  export interface OutputObject {
    assetAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevokeAssetFromVaultEvent {
  export type InputTuple = [assetAddress: AddressLike];
  export type OutputTuple = [assetAddress: string];
  export interface OutputObject {
    assetAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawAssetEvent {
  export type InputTuple = [
    assetAddress: AddressLike,
    assetAmount: BigNumberish,
    withdrawer: AddressLike
  ];
  export type OutputTuple = [
    assetAddress: string,
    assetAmount: bigint,
    withdrawer: string
  ];
  export interface OutputObject {
    assetAddress: string;
    assetAmount: bigint;
    withdrawer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawAssetFailedEvent {
  export type InputTuple = [
    assetAddress: AddressLike,
    assetAmount: BigNumberish,
    withdrawer: AddressLike
  ];
  export type OutputTuple = [
    assetAddress: string,
    assetAmount: bigint,
    withdrawer: string
  ];
  export interface OutputObject {
    assetAddress: string;
    assetAmount: bigint;
    withdrawer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Vault extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: VaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  ROLE_CONTROLLER: TypedContractMethod<[], [string], "view">;

  ROLE_GOVERNANCE: TypedContractMethod<[], [string], "view">;

  ROLE_GOVERNOR: TypedContractMethod<[], [string], "view">;

  allAssets: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  assets: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  balanceOf: TypedContractMethod<[asset: AddressLike], [bigint], "view">;

  countAssets: TypedContractMethod<[], [bigint], "view">;

  deposit: TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  depositFrom: TypedContractMethod<
    [asset: AddressLike, from: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getRoleMember: TypedContractMethod<
    [role: BytesLike, index: BigNumberish],
    [string],
    "view"
  >;

  getRoleMemberCount: TypedContractMethod<[role: BytesLike], [bigint], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasAsset: TypedContractMethod<[asset: AddressLike], [boolean], "view">;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [_controller: AddressLike, _governance: AddressLike],
    [void],
    "nonpayable"
  >;

  recoverAsset: TypedContractMethod<
    [asset: AddressLike, receiver: AddressLike],
    [void],
    "nonpayable"
  >;

  registerAsset: TypedContractMethod<
    [asset: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeAsset: TypedContractMethod<
    [asset: AddressLike, receiver: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  withdraw: TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  withdrawTo: TypedContractMethod<
    [asset: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROLE_CONTROLLER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROLE_GOVERNANCE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROLE_GOVERNOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allAssets"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "assets"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[asset: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "countAssets"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositFrom"
  ): TypedContractMethod<
    [asset: AddressLike, from: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleMember"
  ): TypedContractMethod<
    [role: BytesLike, index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleMemberCount"
  ): TypedContractMethod<[role: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasAsset"
  ): TypedContractMethod<[asset: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_controller: AddressLike, _governance: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "recoverAsset"
  ): TypedContractMethod<
    [asset: AddressLike, receiver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerAsset"
  ): TypedContractMethod<[asset: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeAsset"
  ): TypedContractMethod<
    [asset: AddressLike, receiver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawTo"
  ): TypedContractMethod<
    [asset: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getEvent(
    key: "DepositAsset"
  ): TypedContractEvent<
    DepositAssetEvent.InputTuple,
    DepositAssetEvent.OutputTuple,
    DepositAssetEvent.OutputObject
  >;
  getEvent(
    key: "DepositAssetFailed"
  ): TypedContractEvent<
    DepositAssetFailedEvent.InputTuple,
    DepositAssetFailedEvent.OutputTuple,
    DepositAssetFailedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "RecoveredAsset"
  ): TypedContractEvent<
    RecoveredAssetEvent.InputTuple,
    RecoveredAssetEvent.OutputTuple,
    RecoveredAssetEvent.OutputObject
  >;
  getEvent(
    key: "RecoveredAssetFailed"
  ): TypedContractEvent<
    RecoveredAssetFailedEvent.InputTuple,
    RecoveredAssetFailedEvent.OutputTuple,
    RecoveredAssetFailedEvent.OutputObject
  >;
  getEvent(
    key: "RegisterAssetToVault"
  ): TypedContractEvent<
    RegisterAssetToVaultEvent.InputTuple,
    RegisterAssetToVaultEvent.OutputTuple,
    RegisterAssetToVaultEvent.OutputObject
  >;
  getEvent(
    key: "RevokeAssetFromVault"
  ): TypedContractEvent<
    RevokeAssetFromVaultEvent.InputTuple,
    RevokeAssetFromVaultEvent.OutputTuple,
    RevokeAssetFromVaultEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawAsset"
  ): TypedContractEvent<
    WithdrawAssetEvent.InputTuple,
    WithdrawAssetEvent.OutputTuple,
    WithdrawAssetEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawAssetFailed"
  ): TypedContractEvent<
    WithdrawAssetFailedEvent.InputTuple,
    WithdrawAssetFailedEvent.OutputTuple,
    WithdrawAssetFailedEvent.OutputObject
  >;

  filters: {
    "DepositAsset(address,uint256,address)": TypedContractEvent<
      DepositAssetEvent.InputTuple,
      DepositAssetEvent.OutputTuple,
      DepositAssetEvent.OutputObject
    >;
    DepositAsset: TypedContractEvent<
      DepositAssetEvent.InputTuple,
      DepositAssetEvent.OutputTuple,
      DepositAssetEvent.OutputObject
    >;

    "DepositAssetFailed(address,uint256,address)": TypedContractEvent<
      DepositAssetFailedEvent.InputTuple,
      DepositAssetFailedEvent.OutputTuple,
      DepositAssetFailedEvent.OutputObject
    >;
    DepositAssetFailed: TypedContractEvent<
      DepositAssetFailedEvent.InputTuple,
      DepositAssetFailedEvent.OutputTuple,
      DepositAssetFailedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "RecoveredAsset(address,uint256,address)": TypedContractEvent<
      RecoveredAssetEvent.InputTuple,
      RecoveredAssetEvent.OutputTuple,
      RecoveredAssetEvent.OutputObject
    >;
    RecoveredAsset: TypedContractEvent<
      RecoveredAssetEvent.InputTuple,
      RecoveredAssetEvent.OutputTuple,
      RecoveredAssetEvent.OutputObject
    >;

    "RecoveredAssetFailed(address,uint256,address)": TypedContractEvent<
      RecoveredAssetFailedEvent.InputTuple,
      RecoveredAssetFailedEvent.OutputTuple,
      RecoveredAssetFailedEvent.OutputObject
    >;
    RecoveredAssetFailed: TypedContractEvent<
      RecoveredAssetFailedEvent.InputTuple,
      RecoveredAssetFailedEvent.OutputTuple,
      RecoveredAssetFailedEvent.OutputObject
    >;

    "RegisterAssetToVault(address)": TypedContractEvent<
      RegisterAssetToVaultEvent.InputTuple,
      RegisterAssetToVaultEvent.OutputTuple,
      RegisterAssetToVaultEvent.OutputObject
    >;
    RegisterAssetToVault: TypedContractEvent<
      RegisterAssetToVaultEvent.InputTuple,
      RegisterAssetToVaultEvent.OutputTuple,
      RegisterAssetToVaultEvent.OutputObject
    >;

    "RevokeAssetFromVault(address)": TypedContractEvent<
      RevokeAssetFromVaultEvent.InputTuple,
      RevokeAssetFromVaultEvent.OutputTuple,
      RevokeAssetFromVaultEvent.OutputObject
    >;
    RevokeAssetFromVault: TypedContractEvent<
      RevokeAssetFromVaultEvent.InputTuple,
      RevokeAssetFromVaultEvent.OutputTuple,
      RevokeAssetFromVaultEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "WithdrawAsset(address,uint256,address)": TypedContractEvent<
      WithdrawAssetEvent.InputTuple,
      WithdrawAssetEvent.OutputTuple,
      WithdrawAssetEvent.OutputObject
    >;
    WithdrawAsset: TypedContractEvent<
      WithdrawAssetEvent.InputTuple,
      WithdrawAssetEvent.OutputTuple,
      WithdrawAssetEvent.OutputObject
    >;

    "WithdrawAssetFailed(address,uint256,address)": TypedContractEvent<
      WithdrawAssetFailedEvent.InputTuple,
      WithdrawAssetFailedEvent.OutputTuple,
      WithdrawAssetFailedEvent.OutputObject
    >;
    WithdrawAssetFailed: TypedContractEvent<
      WithdrawAssetFailedEvent.InputTuple,
      WithdrawAssetFailedEvent.OutputTuple,
      WithdrawAssetFailedEvent.OutputObject
    >;
  };
}
