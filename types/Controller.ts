/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ControllerInterface extends utils.Interface {
  functions: {
    "BURN_ADDRESS1()": FunctionFragment;
    "BURN_ADDRESS2()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "ROLE_CONTROLLER()": FunctionFragment;
    "ROLE_DEPOSITER()": FunctionFragment;
    "ROLE_GOVERNANCE()": FunctionFragment;
    "ROLE_GOVERNOR()": FunctionFragment;
    "WAVAX()": FunctionFragment;
    "addStrategy(address)": FunctionFragment;
    "addSwapper(address)": FunctionFragment;
    "addToken(address,address,address)": FunctionFragment;
    "addVault(address)": FunctionFragment;
    "addWantToken(address,string,bool)": FunctionFragment;
    "addressCheck(address)": FunctionFragment;
    "allStrategies(uint256)": FunctionFragment;
    "allSwappers(uint256)": FunctionFragment;
    "allTokens(uint256)": FunctionFragment;
    "allVaults(uint256)": FunctionFragment;
    "allWantTokens(uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseToken()": FunctionFragment;
    "counts()": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "depositOn()": FunctionFragment;
    "depositTokens(address)": FunctionFragment;
    "disableToken(address)": FunctionFragment;
    "disableWantToken(address)": FunctionFragment;
    "enableToken(address)": FunctionFragment;
    "enableWantToken(address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getTotalValue(address)": FunctionFragment;
    "getValueOfTokensForBaseToken(address,uint256)": FunctionFragment;
    "getValueOfTokensForOneBaseToken(address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "isStrategyInUse(address)": FunctionFragment;
    "isSwapper(address)": FunctionFragment;
    "isTokenInAnyVault(address)": FunctionFragment;
    "isTokenInVault(address,address)": FunctionFragment;
    "isVaultInUse(address)": FunctionFragment;
    "isWantTokenSwappable(address)": FunctionFragment;
    "payout(address,uint256,uint256)": FunctionFragment;
    "payoutOn()": FunctionFragment;
    "payoutRaw(uint256)": FunctionFragment;
    "reassignTokenStrategy(address,address)": FunctionFragment;
    "recover(address,address)": FunctionFragment;
    "removeStrategy(address)": FunctionFragment;
    "removeSwapper(address)": FunctionFragment;
    "removeToken(address,address)": FunctionFragment;
    "removeVault(address)": FunctionFragment;
    "removeWantToken(address)": FunctionFragment;
    "renameWantToken(address,string)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setDepositOn(bool)": FunctionFragment;
    "setPayoutOn(bool)": FunctionFragment;
    "shareByAmountScaled(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "swappers(address,address)": FunctionFragment;
    "totalSupplyBaseToken()": FunctionFragment;
    "wantTokens(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BURN_ADDRESS1"
      | "BURN_ADDRESS2"
      | "DEFAULT_ADMIN_ROLE"
      | "ROLE_CONTROLLER"
      | "ROLE_DEPOSITER"
      | "ROLE_GOVERNANCE"
      | "ROLE_GOVERNOR"
      | "WAVAX"
      | "addStrategy"
      | "addSwapper"
      | "addToken"
      | "addVault"
      | "addWantToken"
      | "addressCheck"
      | "allStrategies"
      | "allSwappers"
      | "allTokens"
      | "allVaults"
      | "allWantTokens"
      | "balanceOf"
      | "baseToken"
      | "counts"
      | "deposit"
      | "depositOn"
      | "depositTokens"
      | "disableToken"
      | "disableWantToken"
      | "enableToken"
      | "enableWantToken"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "getTotalValue"
      | "getValueOfTokensForBaseToken"
      | "getValueOfTokensForOneBaseToken"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isStrategyInUse"
      | "isSwapper"
      | "isTokenInAnyVault"
      | "isTokenInVault"
      | "isVaultInUse"
      | "isWantTokenSwappable"
      | "payout"
      | "payoutOn"
      | "payoutRaw"
      | "reassignTokenStrategy"
      | "recover"
      | "removeStrategy"
      | "removeSwapper"
      | "removeToken"
      | "removeVault"
      | "removeWantToken"
      | "renameWantToken"
      | "renounceRole"
      | "revokeRole"
      | "setDepositOn"
      | "setPayoutOn"
      | "shareByAmountScaled"
      | "supportsInterface"
      | "swappers"
      | "totalSupplyBaseToken"
      | "wantTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BURN_ADDRESS1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BURN_ADDRESS2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_CONTROLLER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_DEPOSITER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_GOVERNANCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_GOVERNOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WAVAX", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addStrategy",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addSwapper",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addVault",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addWantToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addressCheck",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allStrategies",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "allSwappers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "allTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "allVaults",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "allWantTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "baseToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "counts", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "depositOn", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "disableToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "disableWantToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "enableToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "enableWantToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalValue",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getValueOfTokensForBaseToken",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getValueOfTokensForOneBaseToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isStrategyInUse",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isSwapper",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenInAnyVault",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenInVault",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isVaultInUse",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isWantTokenSwappable",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "payout",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "payoutOn", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payoutRaw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "reassignTokenStrategy",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "recover",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeStrategy",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSwapper",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeToken",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeVault",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWantToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renameWantToken",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositOn",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPayoutOn",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "shareByAmountScaled",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "swappers",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyBaseToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wantTokens",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "BURN_ADDRESS1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BURN_ADDRESS2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_CONTROLLER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_DEPOSITER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_GOVERNANCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_GOVERNOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WAVAX", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addSwapper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addWantToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allSwappers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allVaults", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allWantTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "counts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositOn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableWantToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableWantToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValueOfTokensForBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValueOfTokensForOneBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isStrategyInUse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isSwapper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTokenInAnyVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenInVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVaultInUse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWantTokenSwappable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payout", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payoutOn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payoutRaw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reassignTokenStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recover", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSwapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWantToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renameWantToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDepositOn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPayoutOn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shareByAmountScaled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swappers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wantTokens", data: BytesLike): Result;

  events: {
    "AllowanceAdded(address)": EventFragment;
    "AllowanceRemoved(address)": EventFragment;
    "AssignedTokenStrategy(address,address)": EventFragment;
    "AssignedTokenVault(address,address)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "DepositTokenDisabled(address)": EventFragment;
    "DepositTokenEnabled(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Payout(address,address,uint256)": EventFragment;
    "ReassignedTokenStrategy(address,address)": EventFragment;
    "Recovered(address,address,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "StrategyAdded(address)": EventFragment;
    "StrategyRemoved(address)": EventFragment;
    "SwapperAdded(address)": EventFragment;
    "SwapperRemoved(address)": EventFragment;
    "TokenAdded(address,address,address)": EventFragment;
    "TokenRemoved(address)": EventFragment;
    "TokensBurned(uint256)": EventFragment;
    "UnassignedTokenStrategy(address,address)": EventFragment;
    "UnassignedTokenVault(address,address)": EventFragment;
    "VaultAdded(address)": EventFragment;
    "VaultRemoved(address)": EventFragment;
    "WantTokenAdded(address,string,bool)": EventFragment;
    "WantTokenDisabled(address)": EventFragment;
    "WantTokenEnabled(address)": EventFragment;
    "WantTokenRemoved(address)": EventFragment;
    "WantTokenRenamed(address,string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllowanceAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllowanceRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssignedTokenStrategy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssignedTokenVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositTokenDisabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositTokenEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Payout"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReassignedTokenStrategy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Recovered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapperAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapperRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensBurned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnassignedTokenStrategy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnassignedTokenVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WantTokenAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WantTokenDisabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WantTokenEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WantTokenRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WantTokenRenamed"): EventFragment;
}

export interface AllowanceAddedEventObject {
  sender: string;
}
export type AllowanceAddedEvent = TypedEvent<
  [string],
  AllowanceAddedEventObject
>;

export type AllowanceAddedEventFilter = TypedEventFilter<AllowanceAddedEvent>;

export interface AllowanceRemovedEventObject {
  sender: string;
}
export type AllowanceRemovedEvent = TypedEvent<
  [string],
  AllowanceRemovedEventObject
>;

export type AllowanceRemovedEventFilter =
  TypedEventFilter<AllowanceRemovedEvent>;

export interface AssignedTokenStrategyEventObject {
  token: string;
  strategy: string;
}
export type AssignedTokenStrategyEvent = TypedEvent<
  [string, string],
  AssignedTokenStrategyEventObject
>;

export type AssignedTokenStrategyEventFilter =
  TypedEventFilter<AssignedTokenStrategyEvent>;

export interface AssignedTokenVaultEventObject {
  token: string;
  vault: string;
}
export type AssignedTokenVaultEvent = TypedEvent<
  [string, string],
  AssignedTokenVaultEventObject
>;

export type AssignedTokenVaultEventFilter =
  TypedEventFilter<AssignedTokenVaultEvent>;

export interface DepositEventObject {
  token: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface DepositTokenDisabledEventObject {
  token: string;
}
export type DepositTokenDisabledEvent = TypedEvent<
  [string],
  DepositTokenDisabledEventObject
>;

export type DepositTokenDisabledEventFilter =
  TypedEventFilter<DepositTokenDisabledEvent>;

export interface DepositTokenEnabledEventObject {
  token: string;
}
export type DepositTokenEnabledEvent = TypedEvent<
  [string],
  DepositTokenEnabledEventObject
>;

export type DepositTokenEnabledEventFilter =
  TypedEventFilter<DepositTokenEnabledEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface PayoutEventObject {
  wantToken: string;
  holder: string;
  receiveAmount: BigNumber;
}
export type PayoutEvent = TypedEvent<
  [string, string, BigNumber],
  PayoutEventObject
>;

export type PayoutEventFilter = TypedEventFilter<PayoutEvent>;

export interface ReassignedTokenStrategyEventObject {
  token: string;
  strategy: string;
}
export type ReassignedTokenStrategyEvent = TypedEvent<
  [string, string],
  ReassignedTokenStrategyEventObject
>;

export type ReassignedTokenStrategyEventFilter =
  TypedEventFilter<ReassignedTokenStrategyEvent>;

export interface RecoveredEventObject {
  token: string;
  receiver: string;
  amount: BigNumber;
}
export type RecoveredEvent = TypedEvent<
  [string, string, BigNumber],
  RecoveredEventObject
>;

export type RecoveredEventFilter = TypedEventFilter<RecoveredEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface StrategyAddedEventObject {
  strategy: string;
}
export type StrategyAddedEvent = TypedEvent<[string], StrategyAddedEventObject>;

export type StrategyAddedEventFilter = TypedEventFilter<StrategyAddedEvent>;

export interface StrategyRemovedEventObject {
  strategy: string;
}
export type StrategyRemovedEvent = TypedEvent<
  [string],
  StrategyRemovedEventObject
>;

export type StrategyRemovedEventFilter = TypedEventFilter<StrategyRemovedEvent>;

export interface SwapperAddedEventObject {
  swapper: string;
}
export type SwapperAddedEvent = TypedEvent<[string], SwapperAddedEventObject>;

export type SwapperAddedEventFilter = TypedEventFilter<SwapperAddedEvent>;

export interface SwapperRemovedEventObject {
  swapper: string;
}
export type SwapperRemovedEvent = TypedEvent<
  [string],
  SwapperRemovedEventObject
>;

export type SwapperRemovedEventFilter = TypedEventFilter<SwapperRemovedEvent>;

export interface TokenAddedEventObject {
  token: string;
  vault: string;
  strategy: string;
}
export type TokenAddedEvent = TypedEvent<
  [string, string, string],
  TokenAddedEventObject
>;

export type TokenAddedEventFilter = TypedEventFilter<TokenAddedEvent>;

export interface TokenRemovedEventObject {
  token: string;
}
export type TokenRemovedEvent = TypedEvent<[string], TokenRemovedEventObject>;

export type TokenRemovedEventFilter = TypedEventFilter<TokenRemovedEvent>;

export interface TokensBurnedEventObject {
  amount: BigNumber;
}
export type TokensBurnedEvent = TypedEvent<
  [BigNumber],
  TokensBurnedEventObject
>;

export type TokensBurnedEventFilter = TypedEventFilter<TokensBurnedEvent>;

export interface UnassignedTokenStrategyEventObject {
  token: string;
  strategy: string;
}
export type UnassignedTokenStrategyEvent = TypedEvent<
  [string, string],
  UnassignedTokenStrategyEventObject
>;

export type UnassignedTokenStrategyEventFilter =
  TypedEventFilter<UnassignedTokenStrategyEvent>;

export interface UnassignedTokenVaultEventObject {
  token: string;
  vault: string;
}
export type UnassignedTokenVaultEvent = TypedEvent<
  [string, string],
  UnassignedTokenVaultEventObject
>;

export type UnassignedTokenVaultEventFilter =
  TypedEventFilter<UnassignedTokenVaultEvent>;

export interface VaultAddedEventObject {
  vault: string;
}
export type VaultAddedEvent = TypedEvent<[string], VaultAddedEventObject>;

export type VaultAddedEventFilter = TypedEventFilter<VaultAddedEvent>;

export interface VaultRemovedEventObject {
  vault: string;
}
export type VaultRemovedEvent = TypedEvent<[string], VaultRemovedEventObject>;

export type VaultRemovedEventFilter = TypedEventFilter<VaultRemovedEvent>;

export interface WantTokenAddedEventObject {
  token: string;
  name: string;
  enabled: boolean;
}
export type WantTokenAddedEvent = TypedEvent<
  [string, string, boolean],
  WantTokenAddedEventObject
>;

export type WantTokenAddedEventFilter = TypedEventFilter<WantTokenAddedEvent>;

export interface WantTokenDisabledEventObject {
  token: string;
}
export type WantTokenDisabledEvent = TypedEvent<
  [string],
  WantTokenDisabledEventObject
>;

export type WantTokenDisabledEventFilter =
  TypedEventFilter<WantTokenDisabledEvent>;

export interface WantTokenEnabledEventObject {
  token: string;
}
export type WantTokenEnabledEvent = TypedEvent<
  [string],
  WantTokenEnabledEventObject
>;

export type WantTokenEnabledEventFilter =
  TypedEventFilter<WantTokenEnabledEvent>;

export interface WantTokenRemovedEventObject {
  token: string;
}
export type WantTokenRemovedEvent = TypedEvent<
  [string],
  WantTokenRemovedEventObject
>;

export type WantTokenRemovedEventFilter =
  TypedEventFilter<WantTokenRemovedEvent>;

export interface WantTokenRenamedEventObject {
  token: string;
  oldName: string;
  newName: string;
}
export type WantTokenRenamedEvent = TypedEvent<
  [string, string, string],
  WantTokenRenamedEventObject
>;

export type WantTokenRenamedEventFilter =
  TypedEventFilter<WantTokenRenamedEvent>;

export interface Controller extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BURN_ADDRESS1(overrides?: CallOverrides): Promise<[string]>;

    BURN_ADDRESS2(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    ROLE_CONTROLLER(overrides?: CallOverrides): Promise<[string]>;

    ROLE_DEPOSITER(overrides?: CallOverrides): Promise<[string]>;

    ROLE_GOVERNANCE(overrides?: CallOverrides): Promise<[string]>;

    ROLE_GOVERNOR(overrides?: CallOverrides): Promise<[string]>;

    WAVAX(overrides?: CallOverrides): Promise<[string]>;

    addStrategy(
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addSwapper(
      _swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addToken(
      _token: PromiseOrValue<string>,
      _vault: PromiseOrValue<string>,
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addVault(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addWantToken(
      _wantToken: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addressCheck(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean] & { isVault: boolean; isStrategy: boolean }>;

    allStrategies(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    allSwappers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    allTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    allVaults(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    allWantTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    balanceOf(
      holder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    baseToken(overrides?: CallOverrides): Promise<[string]>;

    counts(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        countVaults: BigNumber;
        countTokens: BigNumber;
        countSwappers: BigNumber;
        countStrategies: BigNumber;
        countWantTokens: BigNumber;
      }
    >;

    deposit(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositOn(overrides?: CallOverrides): Promise<[boolean]>;

    depositTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean, boolean] & {
        strategy: string;
        vault: string;
        enabled: boolean;
        isToken: boolean;
      }
    >;

    disableToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disableWantToken(
      _wantToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enableToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enableWantToken(
      _wantToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalValue(
      wantToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    getValueOfTokensForBaseToken(
      wantToken: PromiseOrValue<string>,
      inputAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    getValueOfTokensForOneBaseToken(
      wantToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _baseToken: PromiseOrValue<string>,
      _governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isStrategyInUse(
      _strategy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { inUse: boolean }>;

    isSwapper(
      _swapper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { exists: boolean }>;

    isTokenInAnyVault(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { inVault: boolean }>;

    isTokenInVault(
      _token: PromiseOrValue<string>,
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { inVault: boolean }>;

    isVaultInUse(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { inUse: boolean }>;

    isWantTokenSwappable(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isSwappable: boolean }>;

    payout(
      wantToken: PromiseOrValue<string>,
      inputAmount: PromiseOrValue<BigNumberish>,
      outputAmountMin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    payoutOn(overrides?: CallOverrides): Promise<[boolean]>;

    payoutRaw(
      inputAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reassignTokenStrategy(
      _token: PromiseOrValue<string>,
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recover(
      token: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeStrategy(
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeSwapper(
      _swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeToken(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeVault(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeWantToken(
      _wantToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renameWantToken(
      _wantToken: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDepositOn(
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPayoutOn(
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    shareByAmountScaled(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    swappers(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupplyBaseToken(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalSupply: BigNumber }>;

    wantTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, boolean] & {
        name: string;
        enabled: boolean;
        isWantToken: boolean;
      }
    >;
  };

  BURN_ADDRESS1(overrides?: CallOverrides): Promise<string>;

  BURN_ADDRESS2(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  ROLE_CONTROLLER(overrides?: CallOverrides): Promise<string>;

  ROLE_DEPOSITER(overrides?: CallOverrides): Promise<string>;

  ROLE_GOVERNANCE(overrides?: CallOverrides): Promise<string>;

  ROLE_GOVERNOR(overrides?: CallOverrides): Promise<string>;

  WAVAX(overrides?: CallOverrides): Promise<string>;

  addStrategy(
    _strategy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addSwapper(
    _swapper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addToken(
    _token: PromiseOrValue<string>,
    _vault: PromiseOrValue<string>,
    _strategy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addVault(
    _vault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addWantToken(
    _wantToken: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addressCheck(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[boolean, boolean] & { isVault: boolean; isStrategy: boolean }>;

  allStrategies(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  allSwappers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  allTokens(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  allVaults(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  allWantTokens(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  balanceOf(
    holder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  baseToken(overrides?: CallOverrides): Promise<string>;

  counts(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      countVaults: BigNumber;
      countTokens: BigNumber;
      countSwappers: BigNumber;
      countStrategies: BigNumber;
      countWantTokens: BigNumber;
    }
  >;

  deposit(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositOn(overrides?: CallOverrides): Promise<boolean>;

  depositTokens(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, boolean, boolean] & {
      strategy: string;
      vault: string;
      enabled: boolean;
      isToken: boolean;
    }
  >;

  disableToken(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disableWantToken(
    _wantToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enableToken(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enableWantToken(
    _wantToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalValue(
    wantToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getValueOfTokensForBaseToken(
    wantToken: PromiseOrValue<string>,
    inputAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getValueOfTokensForOneBaseToken(
    wantToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _baseToken: PromiseOrValue<string>,
    _governance: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isStrategyInUse(
    _strategy: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSwapper(
    _swapper: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTokenInAnyVault(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTokenInVault(
    _token: PromiseOrValue<string>,
    _vault: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isVaultInUse(
    _vault: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWantTokenSwappable(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  payout(
    wantToken: PromiseOrValue<string>,
    inputAmount: PromiseOrValue<BigNumberish>,
    outputAmountMin: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  payoutOn(overrides?: CallOverrides): Promise<boolean>;

  payoutRaw(
    inputAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reassignTokenStrategy(
    _token: PromiseOrValue<string>,
    _strategy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recover(
    token: PromiseOrValue<string>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeStrategy(
    _strategy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeSwapper(
    _swapper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeToken(
    _token: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeVault(
    _vault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeWantToken(
    _wantToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renameWantToken(
    _wantToken: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDepositOn(
    enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPayoutOn(
    enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  shareByAmountScaled(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  swappers(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  totalSupplyBaseToken(overrides?: CallOverrides): Promise<BigNumber>;

  wantTokens(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, boolean] & {
      name: string;
      enabled: boolean;
      isWantToken: boolean;
    }
  >;

  callStatic: {
    BURN_ADDRESS1(overrides?: CallOverrides): Promise<string>;

    BURN_ADDRESS2(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    ROLE_CONTROLLER(overrides?: CallOverrides): Promise<string>;

    ROLE_DEPOSITER(overrides?: CallOverrides): Promise<string>;

    ROLE_GOVERNANCE(overrides?: CallOverrides): Promise<string>;

    ROLE_GOVERNOR(overrides?: CallOverrides): Promise<string>;

    WAVAX(overrides?: CallOverrides): Promise<string>;

    addStrategy(
      _strategy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addSwapper(
      _swapper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addToken(
      _token: PromiseOrValue<string>,
      _vault: PromiseOrValue<string>,
      _strategy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addVault(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addWantToken(
      _wantToken: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    addressCheck(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean] & { isVault: boolean; isStrategy: boolean }>;

    allStrategies(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    allSwappers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    allTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    allVaults(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    allWantTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    balanceOf(
      holder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<string>;

    counts(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        countVaults: BigNumber;
        countTokens: BigNumber;
        countSwappers: BigNumber;
        countStrategies: BigNumber;
        countWantTokens: BigNumber;
      }
    >;

    deposit(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositOn(overrides?: CallOverrides): Promise<boolean>;

    depositTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean, boolean] & {
        strategy: string;
        vault: string;
        enabled: boolean;
        isToken: boolean;
      }
    >;

    disableToken(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    disableWantToken(
      _wantToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    enableToken(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    enableWantToken(
      _wantToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalValue(
      wantToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValueOfTokensForBaseToken(
      wantToken: PromiseOrValue<string>,
      inputAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValueOfTokensForOneBaseToken(
      wantToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _baseToken: PromiseOrValue<string>,
      _governance: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isStrategyInUse(
      _strategy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSwapper(
      _swapper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTokenInAnyVault(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTokenInVault(
      _token: PromiseOrValue<string>,
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isVaultInUse(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWantTokenSwappable(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    payout(
      wantToken: PromiseOrValue<string>,
      inputAmount: PromiseOrValue<BigNumberish>,
      outputAmountMin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payoutOn(overrides?: CallOverrides): Promise<boolean>;

    payoutRaw(
      inputAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    reassignTokenStrategy(
      _token: PromiseOrValue<string>,
      _strategy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    recover(
      token: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeStrategy(
      _strategy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeSwapper(
      _swapper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeToken(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeVault(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeWantToken(
      _wantToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renameWantToken(
      _wantToken: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDepositOn(
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPayoutOn(
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    shareByAmountScaled(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    swappers(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupplyBaseToken(overrides?: CallOverrides): Promise<BigNumber>;

    wantTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, boolean] & {
        name: string;
        enabled: boolean;
        isWantToken: boolean;
      }
    >;
  };

  filters: {
    "AllowanceAdded(address)"(sender?: null): AllowanceAddedEventFilter;
    AllowanceAdded(sender?: null): AllowanceAddedEventFilter;

    "AllowanceRemoved(address)"(sender?: null): AllowanceRemovedEventFilter;
    AllowanceRemoved(sender?: null): AllowanceRemovedEventFilter;

    "AssignedTokenStrategy(address,address)"(
      token?: null,
      strategy?: null
    ): AssignedTokenStrategyEventFilter;
    AssignedTokenStrategy(
      token?: null,
      strategy?: null
    ): AssignedTokenStrategyEventFilter;

    "AssignedTokenVault(address,address)"(
      token?: null,
      vault?: null
    ): AssignedTokenVaultEventFilter;
    AssignedTokenVault(
      token?: null,
      vault?: null
    ): AssignedTokenVaultEventFilter;

    "Deposit(address,uint256)"(token?: null, amount?: null): DepositEventFilter;
    Deposit(token?: null, amount?: null): DepositEventFilter;

    "DepositTokenDisabled(address)"(
      token?: null
    ): DepositTokenDisabledEventFilter;
    DepositTokenDisabled(token?: null): DepositTokenDisabledEventFilter;

    "DepositTokenEnabled(address)"(
      token?: null
    ): DepositTokenEnabledEventFilter;
    DepositTokenEnabled(token?: null): DepositTokenEnabledEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Payout(address,address,uint256)"(
      wantToken?: null,
      holder?: null,
      receiveAmount?: null
    ): PayoutEventFilter;
    Payout(
      wantToken?: null,
      holder?: null,
      receiveAmount?: null
    ): PayoutEventFilter;

    "ReassignedTokenStrategy(address,address)"(
      token?: null,
      strategy?: null
    ): ReassignedTokenStrategyEventFilter;
    ReassignedTokenStrategy(
      token?: null,
      strategy?: null
    ): ReassignedTokenStrategyEventFilter;

    "Recovered(address,address,uint256)"(
      token?: null,
      receiver?: null,
      amount?: null
    ): RecoveredEventFilter;
    Recovered(
      token?: null,
      receiver?: null,
      amount?: null
    ): RecoveredEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "StrategyAdded(address)"(strategy?: null): StrategyAddedEventFilter;
    StrategyAdded(strategy?: null): StrategyAddedEventFilter;

    "StrategyRemoved(address)"(strategy?: null): StrategyRemovedEventFilter;
    StrategyRemoved(strategy?: null): StrategyRemovedEventFilter;

    "SwapperAdded(address)"(swapper?: null): SwapperAddedEventFilter;
    SwapperAdded(swapper?: null): SwapperAddedEventFilter;

    "SwapperRemoved(address)"(swapper?: null): SwapperRemovedEventFilter;
    SwapperRemoved(swapper?: null): SwapperRemovedEventFilter;

    "TokenAdded(address,address,address)"(
      token?: null,
      vault?: null,
      strategy?: null
    ): TokenAddedEventFilter;
    TokenAdded(
      token?: null,
      vault?: null,
      strategy?: null
    ): TokenAddedEventFilter;

    "TokenRemoved(address)"(token?: null): TokenRemovedEventFilter;
    TokenRemoved(token?: null): TokenRemovedEventFilter;

    "TokensBurned(uint256)"(amount?: null): TokensBurnedEventFilter;
    TokensBurned(amount?: null): TokensBurnedEventFilter;

    "UnassignedTokenStrategy(address,address)"(
      token?: null,
      strategy?: null
    ): UnassignedTokenStrategyEventFilter;
    UnassignedTokenStrategy(
      token?: null,
      strategy?: null
    ): UnassignedTokenStrategyEventFilter;

    "UnassignedTokenVault(address,address)"(
      token?: null,
      vault?: null
    ): UnassignedTokenVaultEventFilter;
    UnassignedTokenVault(
      token?: null,
      vault?: null
    ): UnassignedTokenVaultEventFilter;

    "VaultAdded(address)"(vault?: null): VaultAddedEventFilter;
    VaultAdded(vault?: null): VaultAddedEventFilter;

    "VaultRemoved(address)"(vault?: null): VaultRemovedEventFilter;
    VaultRemoved(vault?: null): VaultRemovedEventFilter;

    "WantTokenAdded(address,string,bool)"(
      token?: null,
      name?: null,
      enabled?: null
    ): WantTokenAddedEventFilter;
    WantTokenAdded(
      token?: null,
      name?: null,
      enabled?: null
    ): WantTokenAddedEventFilter;

    "WantTokenDisabled(address)"(token?: null): WantTokenDisabledEventFilter;
    WantTokenDisabled(token?: null): WantTokenDisabledEventFilter;

    "WantTokenEnabled(address)"(token?: null): WantTokenEnabledEventFilter;
    WantTokenEnabled(token?: null): WantTokenEnabledEventFilter;

    "WantTokenRemoved(address)"(token?: null): WantTokenRemovedEventFilter;
    WantTokenRemoved(token?: null): WantTokenRemovedEventFilter;

    "WantTokenRenamed(address,string,string)"(
      token?: null,
      oldName?: null,
      newName?: null
    ): WantTokenRenamedEventFilter;
    WantTokenRenamed(
      token?: null,
      oldName?: null,
      newName?: null
    ): WantTokenRenamedEventFilter;
  };

  estimateGas: {
    BURN_ADDRESS1(overrides?: CallOverrides): Promise<BigNumber>;

    BURN_ADDRESS2(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    ROLE_CONTROLLER(overrides?: CallOverrides): Promise<BigNumber>;

    ROLE_DEPOSITER(overrides?: CallOverrides): Promise<BigNumber>;

    ROLE_GOVERNANCE(overrides?: CallOverrides): Promise<BigNumber>;

    ROLE_GOVERNOR(overrides?: CallOverrides): Promise<BigNumber>;

    WAVAX(overrides?: CallOverrides): Promise<BigNumber>;

    addStrategy(
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addSwapper(
      _swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addToken(
      _token: PromiseOrValue<string>,
      _vault: PromiseOrValue<string>,
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addVault(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addWantToken(
      _wantToken: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addressCheck(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allStrategies(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allSwappers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allVaults(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allWantTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      holder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<BigNumber>;

    counts(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositOn(overrides?: CallOverrides): Promise<BigNumber>;

    depositTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disableToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disableWantToken(
      _wantToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enableToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enableWantToken(
      _wantToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalValue(
      wantToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValueOfTokensForBaseToken(
      wantToken: PromiseOrValue<string>,
      inputAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValueOfTokensForOneBaseToken(
      wantToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _baseToken: PromiseOrValue<string>,
      _governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isStrategyInUse(
      _strategy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSwapper(
      _swapper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTokenInAnyVault(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTokenInVault(
      _token: PromiseOrValue<string>,
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isVaultInUse(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWantTokenSwappable(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payout(
      wantToken: PromiseOrValue<string>,
      inputAmount: PromiseOrValue<BigNumberish>,
      outputAmountMin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    payoutOn(overrides?: CallOverrides): Promise<BigNumber>;

    payoutRaw(
      inputAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reassignTokenStrategy(
      _token: PromiseOrValue<string>,
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    recover(
      token: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeStrategy(
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeSwapper(
      _swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeToken(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeVault(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeWantToken(
      _wantToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renameWantToken(
      _wantToken: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDepositOn(
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPayoutOn(
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    shareByAmountScaled(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swappers(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupplyBaseToken(overrides?: CallOverrides): Promise<BigNumber>;

    wantTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BURN_ADDRESS1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BURN_ADDRESS2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ROLE_CONTROLLER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROLE_DEPOSITER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROLE_GOVERNANCE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROLE_GOVERNOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WAVAX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addStrategy(
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addSwapper(
      _swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addToken(
      _token: PromiseOrValue<string>,
      _vault: PromiseOrValue<string>,
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addVault(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addWantToken(
      _wantToken: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addressCheck(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allStrategies(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allSwappers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allVaults(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allWantTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      holder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    counts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositOn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disableToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disableWantToken(
      _wantToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enableToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enableWantToken(
      _wantToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalValue(
      wantToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValueOfTokensForBaseToken(
      wantToken: PromiseOrValue<string>,
      inputAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValueOfTokensForOneBaseToken(
      wantToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _baseToken: PromiseOrValue<string>,
      _governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isStrategyInUse(
      _strategy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSwapper(
      _swapper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTokenInAnyVault(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTokenInVault(
      _token: PromiseOrValue<string>,
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVaultInUse(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWantTokenSwappable(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payout(
      wantToken: PromiseOrValue<string>,
      inputAmount: PromiseOrValue<BigNumberish>,
      outputAmountMin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    payoutOn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payoutRaw(
      inputAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reassignTokenStrategy(
      _token: PromiseOrValue<string>,
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recover(
      token: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeStrategy(
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeSwapper(
      _swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeToken(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeVault(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeWantToken(
      _wantToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renameWantToken(
      _wantToken: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDepositOn(
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPayoutOn(
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    shareByAmountScaled(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swappers(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupplyBaseToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wantTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
