/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ControllerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BURN_ADDRESS1"
      | "BURN_ADDRESS2"
      | "DEFAULT_ADMIN_ROLE"
      | "ROLE_CONTROLLER"
      | "ROLE_DEPOSITER"
      | "ROLE_GOVERNANCE"
      | "ROLE_GOVERNOR"
      | "WAVAX"
      | "addStrategy"
      | "addSwapper"
      | "addToken"
      | "addVault"
      | "addWantToken"
      | "addressCheck"
      | "allStrategies"
      | "allSwappers"
      | "allTokens"
      | "allVaults"
      | "allWantTokens"
      | "balanceOf"
      | "baseToken"
      | "counts"
      | "deposit"
      | "depositOn"
      | "depositTokens"
      | "disableToken"
      | "disableWantToken"
      | "enableToken"
      | "enableWantToken"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "getTotalValue"
      | "getValueOfTokensForBaseToken"
      | "getValueOfTokensForOneBaseToken"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isStrategyInUse"
      | "isSwapper"
      | "isTokenInAnyVault"
      | "isTokenInVault"
      | "isVaultInUse"
      | "isWantTokenSwappable"
      | "payout"
      | "payoutOn"
      | "payoutRaw"
      | "reassignTokenStrategy"
      | "recover"
      | "removeStrategy"
      | "removeSwapper"
      | "removeToken"
      | "removeVault"
      | "removeWantToken"
      | "renameWantToken"
      | "renounceRole"
      | "revokeRole"
      | "setDepositOn"
      | "setPayoutOn"
      | "shareByAmountScaled"
      | "supportsInterface"
      | "swappers"
      | "totalSupplyBaseToken"
      | "wantTokens"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AllowanceAdded"
      | "AllowanceRemoved"
      | "AssignedTokenStrategy"
      | "AssignedTokenVault"
      | "Deposit"
      | "DepositTokenDisabled"
      | "DepositTokenEnabled"
      | "Initialized"
      | "Payout"
      | "ReassignedTokenStrategy"
      | "Recovered"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "StrategyAdded"
      | "StrategyRemoved"
      | "SwapperAdded"
      | "SwapperRemoved"
      | "TokenAdded"
      | "TokenRemoved"
      | "TokensBurned"
      | "UnassignedTokenStrategy"
      | "UnassignedTokenVault"
      | "VaultAdded"
      | "VaultRemoved"
      | "WantTokenAdded"
      | "WantTokenDisabled"
      | "WantTokenEnabled"
      | "WantTokenRemoved"
      | "WantTokenRenamed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BURN_ADDRESS1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BURN_ADDRESS2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_CONTROLLER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_DEPOSITER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_GOVERNANCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_GOVERNOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WAVAX", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addStrategy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addSwapper",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addToken",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addWantToken",
    values: [AddressLike, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "addressCheck",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allStrategies",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allSwappers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allVaults",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allWantTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "baseToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "counts", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "depositOn", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "disableToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "disableWantToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "enableToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "enableWantToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalValue",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getValueOfTokensForBaseToken",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getValueOfTokensForOneBaseToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isStrategyInUse",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSwapper",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenInAnyVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenInVault",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isVaultInUse",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isWantTokenSwappable",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "payout",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "payoutOn", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payoutRaw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reassignTokenStrategy",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recover",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeStrategy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSwapper",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeToken",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWantToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renameWantToken",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositOn",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPayoutOn",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "shareByAmountScaled",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swappers",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyBaseToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wantTokens",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "BURN_ADDRESS1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BURN_ADDRESS2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_CONTROLLER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_DEPOSITER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_GOVERNANCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_GOVERNOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WAVAX", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addSwapper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addWantToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allSwappers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allVaults", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allWantTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "counts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositOn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableWantToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableWantToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValueOfTokensForBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValueOfTokensForOneBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isStrategyInUse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isSwapper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTokenInAnyVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenInVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVaultInUse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWantTokenSwappable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payout", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payoutOn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payoutRaw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reassignTokenStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recover", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSwapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWantToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renameWantToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDepositOn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPayoutOn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shareByAmountScaled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swappers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wantTokens", data: BytesLike): Result;
}

export namespace AllowanceAddedEvent {
  export type InputTuple = [sender: AddressLike];
  export type OutputTuple = [sender: string];
  export interface OutputObject {
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AllowanceRemovedEvent {
  export type InputTuple = [sender: AddressLike];
  export type OutputTuple = [sender: string];
  export interface OutputObject {
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssignedTokenStrategyEvent {
  export type InputTuple = [token: AddressLike, strategy: AddressLike];
  export type OutputTuple = [token: string, strategy: string];
  export interface OutputObject {
    token: string;
    strategy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssignedTokenVaultEvent {
  export type InputTuple = [token: AddressLike, vault: AddressLike];
  export type OutputTuple = [token: string, vault: string];
  export interface OutputObject {
    token: string;
    vault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [token: AddressLike, amount: BigNumberish];
  export type OutputTuple = [token: string, amount: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositTokenDisabledEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositTokenEnabledEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PayoutEvent {
  export type InputTuple = [
    wantToken: AddressLike,
    holder: AddressLike,
    receiveAmount: BigNumberish
  ];
  export type OutputTuple = [
    wantToken: string,
    holder: string,
    receiveAmount: bigint
  ];
  export interface OutputObject {
    wantToken: string;
    holder: string;
    receiveAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReassignedTokenStrategyEvent {
  export type InputTuple = [token: AddressLike, strategy: AddressLike];
  export type OutputTuple = [token: string, strategy: string];
  export interface OutputObject {
    token: string;
    strategy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecoveredEvent {
  export type InputTuple = [
    token: AddressLike,
    receiver: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [token: string, receiver: string, amount: bigint];
  export interface OutputObject {
    token: string;
    receiver: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyAddedEvent {
  export type InputTuple = [strategy: AddressLike];
  export type OutputTuple = [strategy: string];
  export interface OutputObject {
    strategy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyRemovedEvent {
  export type InputTuple = [strategy: AddressLike];
  export type OutputTuple = [strategy: string];
  export interface OutputObject {
    strategy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapperAddedEvent {
  export type InputTuple = [swapper: AddressLike];
  export type OutputTuple = [swapper: string];
  export interface OutputObject {
    swapper: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapperRemovedEvent {
  export type InputTuple = [swapper: AddressLike];
  export type OutputTuple = [swapper: string];
  export interface OutputObject {
    swapper: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenAddedEvent {
  export type InputTuple = [
    token: AddressLike,
    vault: AddressLike,
    strategy: AddressLike
  ];
  export type OutputTuple = [token: string, vault: string, strategy: string];
  export interface OutputObject {
    token: string;
    vault: string;
    strategy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenRemovedEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensBurnedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnassignedTokenStrategyEvent {
  export type InputTuple = [token: AddressLike, strategy: AddressLike];
  export type OutputTuple = [token: string, strategy: string];
  export interface OutputObject {
    token: string;
    strategy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnassignedTokenVaultEvent {
  export type InputTuple = [token: AddressLike, vault: AddressLike];
  export type OutputTuple = [token: string, vault: string];
  export interface OutputObject {
    token: string;
    vault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultAddedEvent {
  export type InputTuple = [vault: AddressLike];
  export type OutputTuple = [vault: string];
  export interface OutputObject {
    vault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultRemovedEvent {
  export type InputTuple = [vault: AddressLike];
  export type OutputTuple = [vault: string];
  export interface OutputObject {
    vault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WantTokenAddedEvent {
  export type InputTuple = [token: AddressLike, name: string, enabled: boolean];
  export type OutputTuple = [token: string, name: string, enabled: boolean];
  export interface OutputObject {
    token: string;
    name: string;
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WantTokenDisabledEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WantTokenEnabledEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WantTokenRemovedEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WantTokenRenamedEvent {
  export type InputTuple = [
    token: AddressLike,
    oldName: string,
    newName: string
  ];
  export type OutputTuple = [token: string, oldName: string, newName: string];
  export interface OutputObject {
    token: string;
    oldName: string;
    newName: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Controller extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: ControllerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BURN_ADDRESS1: TypedContractMethod<[], [string], "view">;

  BURN_ADDRESS2: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  ROLE_CONTROLLER: TypedContractMethod<[], [string], "view">;

  ROLE_DEPOSITER: TypedContractMethod<[], [string], "view">;

  ROLE_GOVERNANCE: TypedContractMethod<[], [string], "view">;

  ROLE_GOVERNOR: TypedContractMethod<[], [string], "view">;

  WAVAX: TypedContractMethod<[], [string], "view">;

  addStrategy: TypedContractMethod<
    [_strategy: AddressLike],
    [void],
    "nonpayable"
  >;

  addSwapper: TypedContractMethod<
    [_swapper: AddressLike],
    [void],
    "nonpayable"
  >;

  addToken: TypedContractMethod<
    [_token: AddressLike, _vault: AddressLike, _strategy: AddressLike],
    [void],
    "nonpayable"
  >;

  addVault: TypedContractMethod<[_vault: AddressLike], [void], "nonpayable">;

  addWantToken: TypedContractMethod<
    [_wantToken: AddressLike, _name: string, _enabled: boolean],
    [void],
    "nonpayable"
  >;

  addressCheck: TypedContractMethod<
    [arg0: AddressLike],
    [[boolean, boolean] & { isVault: boolean; isStrategy: boolean }],
    "view"
  >;

  allStrategies: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  allSwappers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  allTokens: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  allVaults: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  allWantTokens: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  balanceOf: TypedContractMethod<[holder: AddressLike], [bigint], "view">;

  baseToken: TypedContractMethod<[], [string], "view">;

  counts: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        countVaults: bigint;
        countTokens: bigint;
        countSwappers: bigint;
        countStrategies: bigint;
        countWantTokens: bigint;
      }
    ],
    "view"
  >;

  deposit: TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  depositOn: TypedContractMethod<[], [boolean], "view">;

  depositTokens: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, boolean, boolean] & {
        strategy: string;
        vault: string;
        enabled: boolean;
        isToken: boolean;
      }
    ],
    "view"
  >;

  disableToken: TypedContractMethod<
    [_token: AddressLike],
    [void],
    "nonpayable"
  >;

  disableWantToken: TypedContractMethod<
    [_wantToken: AddressLike],
    [void],
    "nonpayable"
  >;

  enableToken: TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;

  enableWantToken: TypedContractMethod<
    [_wantToken: AddressLike],
    [void],
    "nonpayable"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getRoleMember: TypedContractMethod<
    [role: BytesLike, index: BigNumberish],
    [string],
    "view"
  >;

  getRoleMemberCount: TypedContractMethod<[role: BytesLike], [bigint], "view">;

  getTotalValue: TypedContractMethod<
    [wantToken: AddressLike],
    [bigint],
    "view"
  >;

  getValueOfTokensForBaseToken: TypedContractMethod<
    [wantToken: AddressLike, inputAmount: BigNumberish],
    [bigint],
    "view"
  >;

  getValueOfTokensForOneBaseToken: TypedContractMethod<
    [wantToken: AddressLike],
    [bigint],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [_baseToken: AddressLike, _governance: AddressLike],
    [void],
    "nonpayable"
  >;

  isStrategyInUse: TypedContractMethod<
    [_strategy: AddressLike],
    [boolean],
    "view"
  >;

  isSwapper: TypedContractMethod<[_swapper: AddressLike], [boolean], "view">;

  isTokenInAnyVault: TypedContractMethod<
    [_token: AddressLike],
    [boolean],
    "view"
  >;

  isTokenInVault: TypedContractMethod<
    [_token: AddressLike, _vault: AddressLike],
    [boolean],
    "view"
  >;

  isVaultInUse: TypedContractMethod<[_vault: AddressLike], [boolean], "view">;

  isWantTokenSwappable: TypedContractMethod<
    [_token: AddressLike],
    [boolean],
    "view"
  >;

  payout: TypedContractMethod<
    [
      wantToken: AddressLike,
      inputAmount: BigNumberish,
      outputAmountMin: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  payoutOn: TypedContractMethod<[], [boolean], "view">;

  payoutRaw: TypedContractMethod<
    [inputAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  reassignTokenStrategy: TypedContractMethod<
    [_token: AddressLike, _strategy: AddressLike],
    [void],
    "nonpayable"
  >;

  recover: TypedContractMethod<
    [token: AddressLike, receiver: AddressLike],
    [void],
    "nonpayable"
  >;

  removeStrategy: TypedContractMethod<
    [_strategy: AddressLike],
    [void],
    "nonpayable"
  >;

  removeSwapper: TypedContractMethod<
    [_swapper: AddressLike],
    [void],
    "nonpayable"
  >;

  removeToken: TypedContractMethod<
    [_token: AddressLike, _receiver: AddressLike],
    [void],
    "nonpayable"
  >;

  removeVault: TypedContractMethod<[_vault: AddressLike], [void], "nonpayable">;

  removeWantToken: TypedContractMethod<
    [_wantToken: AddressLike],
    [void],
    "nonpayable"
  >;

  renameWantToken: TypedContractMethod<
    [_wantToken: AddressLike, _name: string],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setDepositOn: TypedContractMethod<[enabled: boolean], [void], "nonpayable">;

  setPayoutOn: TypedContractMethod<[enabled: boolean], [void], "nonpayable">;

  shareByAmountScaled: TypedContractMethod<
    [amount: BigNumberish],
    [bigint],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  swappers: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [string],
    "view"
  >;

  totalSupplyBaseToken: TypedContractMethod<[], [bigint], "view">;

  wantTokens: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, boolean, boolean] & {
        name: string;
        enabled: boolean;
        isWantToken: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BURN_ADDRESS1"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BURN_ADDRESS2"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROLE_CONTROLLER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROLE_DEPOSITER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROLE_GOVERNANCE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROLE_GOVERNOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "WAVAX"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addStrategy"
  ): TypedContractMethod<[_strategy: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addSwapper"
  ): TypedContractMethod<[_swapper: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addToken"
  ): TypedContractMethod<
    [_token: AddressLike, _vault: AddressLike, _strategy: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addVault"
  ): TypedContractMethod<[_vault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addWantToken"
  ): TypedContractMethod<
    [_wantToken: AddressLike, _name: string, _enabled: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addressCheck"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[boolean, boolean] & { isVault: boolean; isStrategy: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "allStrategies"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "allSwappers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "allTokens"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "allVaults"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "allWantTokens"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[holder: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "counts"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        countVaults: bigint;
        countTokens: bigint;
        countSwappers: bigint;
        countStrategies: bigint;
        countWantTokens: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositOn"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "depositTokens"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, boolean, boolean] & {
        strategy: string;
        vault: string;
        enabled: boolean;
        isToken: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "disableToken"
  ): TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "disableWantToken"
  ): TypedContractMethod<[_wantToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enableToken"
  ): TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enableWantToken"
  ): TypedContractMethod<[_wantToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleMember"
  ): TypedContractMethod<
    [role: BytesLike, index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleMemberCount"
  ): TypedContractMethod<[role: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalValue"
  ): TypedContractMethod<[wantToken: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getValueOfTokensForBaseToken"
  ): TypedContractMethod<
    [wantToken: AddressLike, inputAmount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getValueOfTokensForOneBaseToken"
  ): TypedContractMethod<[wantToken: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_baseToken: AddressLike, _governance: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isStrategyInUse"
  ): TypedContractMethod<[_strategy: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSwapper"
  ): TypedContractMethod<[_swapper: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isTokenInAnyVault"
  ): TypedContractMethod<[_token: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isTokenInVault"
  ): TypedContractMethod<
    [_token: AddressLike, _vault: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isVaultInUse"
  ): TypedContractMethod<[_vault: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isWantTokenSwappable"
  ): TypedContractMethod<[_token: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "payout"
  ): TypedContractMethod<
    [
      wantToken: AddressLike,
      inputAmount: BigNumberish,
      outputAmountMin: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payoutOn"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "payoutRaw"
  ): TypedContractMethod<[inputAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reassignTokenStrategy"
  ): TypedContractMethod<
    [_token: AddressLike, _strategy: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "recover"
  ): TypedContractMethod<
    [token: AddressLike, receiver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeStrategy"
  ): TypedContractMethod<[_strategy: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeSwapper"
  ): TypedContractMethod<[_swapper: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeToken"
  ): TypedContractMethod<
    [_token: AddressLike, _receiver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeVault"
  ): TypedContractMethod<[_vault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeWantToken"
  ): TypedContractMethod<[_wantToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renameWantToken"
  ): TypedContractMethod<
    [_wantToken: AddressLike, _name: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDepositOn"
  ): TypedContractMethod<[enabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPayoutOn"
  ): TypedContractMethod<[enabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "shareByAmountScaled"
  ): TypedContractMethod<[amount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "swappers"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalSupplyBaseToken"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "wantTokens"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, boolean, boolean] & {
        name: string;
        enabled: boolean;
        isWantToken: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "AllowanceAdded"
  ): TypedContractEvent<
    AllowanceAddedEvent.InputTuple,
    AllowanceAddedEvent.OutputTuple,
    AllowanceAddedEvent.OutputObject
  >;
  getEvent(
    key: "AllowanceRemoved"
  ): TypedContractEvent<
    AllowanceRemovedEvent.InputTuple,
    AllowanceRemovedEvent.OutputTuple,
    AllowanceRemovedEvent.OutputObject
  >;
  getEvent(
    key: "AssignedTokenStrategy"
  ): TypedContractEvent<
    AssignedTokenStrategyEvent.InputTuple,
    AssignedTokenStrategyEvent.OutputTuple,
    AssignedTokenStrategyEvent.OutputObject
  >;
  getEvent(
    key: "AssignedTokenVault"
  ): TypedContractEvent<
    AssignedTokenVaultEvent.InputTuple,
    AssignedTokenVaultEvent.OutputTuple,
    AssignedTokenVaultEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "DepositTokenDisabled"
  ): TypedContractEvent<
    DepositTokenDisabledEvent.InputTuple,
    DepositTokenDisabledEvent.OutputTuple,
    DepositTokenDisabledEvent.OutputObject
  >;
  getEvent(
    key: "DepositTokenEnabled"
  ): TypedContractEvent<
    DepositTokenEnabledEvent.InputTuple,
    DepositTokenEnabledEvent.OutputTuple,
    DepositTokenEnabledEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Payout"
  ): TypedContractEvent<
    PayoutEvent.InputTuple,
    PayoutEvent.OutputTuple,
    PayoutEvent.OutputObject
  >;
  getEvent(
    key: "ReassignedTokenStrategy"
  ): TypedContractEvent<
    ReassignedTokenStrategyEvent.InputTuple,
    ReassignedTokenStrategyEvent.OutputTuple,
    ReassignedTokenStrategyEvent.OutputObject
  >;
  getEvent(
    key: "Recovered"
  ): TypedContractEvent<
    RecoveredEvent.InputTuple,
    RecoveredEvent.OutputTuple,
    RecoveredEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyAdded"
  ): TypedContractEvent<
    StrategyAddedEvent.InputTuple,
    StrategyAddedEvent.OutputTuple,
    StrategyAddedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyRemoved"
  ): TypedContractEvent<
    StrategyRemovedEvent.InputTuple,
    StrategyRemovedEvent.OutputTuple,
    StrategyRemovedEvent.OutputObject
  >;
  getEvent(
    key: "SwapperAdded"
  ): TypedContractEvent<
    SwapperAddedEvent.InputTuple,
    SwapperAddedEvent.OutputTuple,
    SwapperAddedEvent.OutputObject
  >;
  getEvent(
    key: "SwapperRemoved"
  ): TypedContractEvent<
    SwapperRemovedEvent.InputTuple,
    SwapperRemovedEvent.OutputTuple,
    SwapperRemovedEvent.OutputObject
  >;
  getEvent(
    key: "TokenAdded"
  ): TypedContractEvent<
    TokenAddedEvent.InputTuple,
    TokenAddedEvent.OutputTuple,
    TokenAddedEvent.OutputObject
  >;
  getEvent(
    key: "TokenRemoved"
  ): TypedContractEvent<
    TokenRemovedEvent.InputTuple,
    TokenRemovedEvent.OutputTuple,
    TokenRemovedEvent.OutputObject
  >;
  getEvent(
    key: "TokensBurned"
  ): TypedContractEvent<
    TokensBurnedEvent.InputTuple,
    TokensBurnedEvent.OutputTuple,
    TokensBurnedEvent.OutputObject
  >;
  getEvent(
    key: "UnassignedTokenStrategy"
  ): TypedContractEvent<
    UnassignedTokenStrategyEvent.InputTuple,
    UnassignedTokenStrategyEvent.OutputTuple,
    UnassignedTokenStrategyEvent.OutputObject
  >;
  getEvent(
    key: "UnassignedTokenVault"
  ): TypedContractEvent<
    UnassignedTokenVaultEvent.InputTuple,
    UnassignedTokenVaultEvent.OutputTuple,
    UnassignedTokenVaultEvent.OutputObject
  >;
  getEvent(
    key: "VaultAdded"
  ): TypedContractEvent<
    VaultAddedEvent.InputTuple,
    VaultAddedEvent.OutputTuple,
    VaultAddedEvent.OutputObject
  >;
  getEvent(
    key: "VaultRemoved"
  ): TypedContractEvent<
    VaultRemovedEvent.InputTuple,
    VaultRemovedEvent.OutputTuple,
    VaultRemovedEvent.OutputObject
  >;
  getEvent(
    key: "WantTokenAdded"
  ): TypedContractEvent<
    WantTokenAddedEvent.InputTuple,
    WantTokenAddedEvent.OutputTuple,
    WantTokenAddedEvent.OutputObject
  >;
  getEvent(
    key: "WantTokenDisabled"
  ): TypedContractEvent<
    WantTokenDisabledEvent.InputTuple,
    WantTokenDisabledEvent.OutputTuple,
    WantTokenDisabledEvent.OutputObject
  >;
  getEvent(
    key: "WantTokenEnabled"
  ): TypedContractEvent<
    WantTokenEnabledEvent.InputTuple,
    WantTokenEnabledEvent.OutputTuple,
    WantTokenEnabledEvent.OutputObject
  >;
  getEvent(
    key: "WantTokenRemoved"
  ): TypedContractEvent<
    WantTokenRemovedEvent.InputTuple,
    WantTokenRemovedEvent.OutputTuple,
    WantTokenRemovedEvent.OutputObject
  >;
  getEvent(
    key: "WantTokenRenamed"
  ): TypedContractEvent<
    WantTokenRenamedEvent.InputTuple,
    WantTokenRenamedEvent.OutputTuple,
    WantTokenRenamedEvent.OutputObject
  >;

  filters: {
    "AllowanceAdded(address)": TypedContractEvent<
      AllowanceAddedEvent.InputTuple,
      AllowanceAddedEvent.OutputTuple,
      AllowanceAddedEvent.OutputObject
    >;
    AllowanceAdded: TypedContractEvent<
      AllowanceAddedEvent.InputTuple,
      AllowanceAddedEvent.OutputTuple,
      AllowanceAddedEvent.OutputObject
    >;

    "AllowanceRemoved(address)": TypedContractEvent<
      AllowanceRemovedEvent.InputTuple,
      AllowanceRemovedEvent.OutputTuple,
      AllowanceRemovedEvent.OutputObject
    >;
    AllowanceRemoved: TypedContractEvent<
      AllowanceRemovedEvent.InputTuple,
      AllowanceRemovedEvent.OutputTuple,
      AllowanceRemovedEvent.OutputObject
    >;

    "AssignedTokenStrategy(address,address)": TypedContractEvent<
      AssignedTokenStrategyEvent.InputTuple,
      AssignedTokenStrategyEvent.OutputTuple,
      AssignedTokenStrategyEvent.OutputObject
    >;
    AssignedTokenStrategy: TypedContractEvent<
      AssignedTokenStrategyEvent.InputTuple,
      AssignedTokenStrategyEvent.OutputTuple,
      AssignedTokenStrategyEvent.OutputObject
    >;

    "AssignedTokenVault(address,address)": TypedContractEvent<
      AssignedTokenVaultEvent.InputTuple,
      AssignedTokenVaultEvent.OutputTuple,
      AssignedTokenVaultEvent.OutputObject
    >;
    AssignedTokenVault: TypedContractEvent<
      AssignedTokenVaultEvent.InputTuple,
      AssignedTokenVaultEvent.OutputTuple,
      AssignedTokenVaultEvent.OutputObject
    >;

    "Deposit(address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "DepositTokenDisabled(address)": TypedContractEvent<
      DepositTokenDisabledEvent.InputTuple,
      DepositTokenDisabledEvent.OutputTuple,
      DepositTokenDisabledEvent.OutputObject
    >;
    DepositTokenDisabled: TypedContractEvent<
      DepositTokenDisabledEvent.InputTuple,
      DepositTokenDisabledEvent.OutputTuple,
      DepositTokenDisabledEvent.OutputObject
    >;

    "DepositTokenEnabled(address)": TypedContractEvent<
      DepositTokenEnabledEvent.InputTuple,
      DepositTokenEnabledEvent.OutputTuple,
      DepositTokenEnabledEvent.OutputObject
    >;
    DepositTokenEnabled: TypedContractEvent<
      DepositTokenEnabledEvent.InputTuple,
      DepositTokenEnabledEvent.OutputTuple,
      DepositTokenEnabledEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Payout(address,address,uint256)": TypedContractEvent<
      PayoutEvent.InputTuple,
      PayoutEvent.OutputTuple,
      PayoutEvent.OutputObject
    >;
    Payout: TypedContractEvent<
      PayoutEvent.InputTuple,
      PayoutEvent.OutputTuple,
      PayoutEvent.OutputObject
    >;

    "ReassignedTokenStrategy(address,address)": TypedContractEvent<
      ReassignedTokenStrategyEvent.InputTuple,
      ReassignedTokenStrategyEvent.OutputTuple,
      ReassignedTokenStrategyEvent.OutputObject
    >;
    ReassignedTokenStrategy: TypedContractEvent<
      ReassignedTokenStrategyEvent.InputTuple,
      ReassignedTokenStrategyEvent.OutputTuple,
      ReassignedTokenStrategyEvent.OutputObject
    >;

    "Recovered(address,address,uint256)": TypedContractEvent<
      RecoveredEvent.InputTuple,
      RecoveredEvent.OutputTuple,
      RecoveredEvent.OutputObject
    >;
    Recovered: TypedContractEvent<
      RecoveredEvent.InputTuple,
      RecoveredEvent.OutputTuple,
      RecoveredEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "StrategyAdded(address)": TypedContractEvent<
      StrategyAddedEvent.InputTuple,
      StrategyAddedEvent.OutputTuple,
      StrategyAddedEvent.OutputObject
    >;
    StrategyAdded: TypedContractEvent<
      StrategyAddedEvent.InputTuple,
      StrategyAddedEvent.OutputTuple,
      StrategyAddedEvent.OutputObject
    >;

    "StrategyRemoved(address)": TypedContractEvent<
      StrategyRemovedEvent.InputTuple,
      StrategyRemovedEvent.OutputTuple,
      StrategyRemovedEvent.OutputObject
    >;
    StrategyRemoved: TypedContractEvent<
      StrategyRemovedEvent.InputTuple,
      StrategyRemovedEvent.OutputTuple,
      StrategyRemovedEvent.OutputObject
    >;

    "SwapperAdded(address)": TypedContractEvent<
      SwapperAddedEvent.InputTuple,
      SwapperAddedEvent.OutputTuple,
      SwapperAddedEvent.OutputObject
    >;
    SwapperAdded: TypedContractEvent<
      SwapperAddedEvent.InputTuple,
      SwapperAddedEvent.OutputTuple,
      SwapperAddedEvent.OutputObject
    >;

    "SwapperRemoved(address)": TypedContractEvent<
      SwapperRemovedEvent.InputTuple,
      SwapperRemovedEvent.OutputTuple,
      SwapperRemovedEvent.OutputObject
    >;
    SwapperRemoved: TypedContractEvent<
      SwapperRemovedEvent.InputTuple,
      SwapperRemovedEvent.OutputTuple,
      SwapperRemovedEvent.OutputObject
    >;

    "TokenAdded(address,address,address)": TypedContractEvent<
      TokenAddedEvent.InputTuple,
      TokenAddedEvent.OutputTuple,
      TokenAddedEvent.OutputObject
    >;
    TokenAdded: TypedContractEvent<
      TokenAddedEvent.InputTuple,
      TokenAddedEvent.OutputTuple,
      TokenAddedEvent.OutputObject
    >;

    "TokenRemoved(address)": TypedContractEvent<
      TokenRemovedEvent.InputTuple,
      TokenRemovedEvent.OutputTuple,
      TokenRemovedEvent.OutputObject
    >;
    TokenRemoved: TypedContractEvent<
      TokenRemovedEvent.InputTuple,
      TokenRemovedEvent.OutputTuple,
      TokenRemovedEvent.OutputObject
    >;

    "TokensBurned(uint256)": TypedContractEvent<
      TokensBurnedEvent.InputTuple,
      TokensBurnedEvent.OutputTuple,
      TokensBurnedEvent.OutputObject
    >;
    TokensBurned: TypedContractEvent<
      TokensBurnedEvent.InputTuple,
      TokensBurnedEvent.OutputTuple,
      TokensBurnedEvent.OutputObject
    >;

    "UnassignedTokenStrategy(address,address)": TypedContractEvent<
      UnassignedTokenStrategyEvent.InputTuple,
      UnassignedTokenStrategyEvent.OutputTuple,
      UnassignedTokenStrategyEvent.OutputObject
    >;
    UnassignedTokenStrategy: TypedContractEvent<
      UnassignedTokenStrategyEvent.InputTuple,
      UnassignedTokenStrategyEvent.OutputTuple,
      UnassignedTokenStrategyEvent.OutputObject
    >;

    "UnassignedTokenVault(address,address)": TypedContractEvent<
      UnassignedTokenVaultEvent.InputTuple,
      UnassignedTokenVaultEvent.OutputTuple,
      UnassignedTokenVaultEvent.OutputObject
    >;
    UnassignedTokenVault: TypedContractEvent<
      UnassignedTokenVaultEvent.InputTuple,
      UnassignedTokenVaultEvent.OutputTuple,
      UnassignedTokenVaultEvent.OutputObject
    >;

    "VaultAdded(address)": TypedContractEvent<
      VaultAddedEvent.InputTuple,
      VaultAddedEvent.OutputTuple,
      VaultAddedEvent.OutputObject
    >;
    VaultAdded: TypedContractEvent<
      VaultAddedEvent.InputTuple,
      VaultAddedEvent.OutputTuple,
      VaultAddedEvent.OutputObject
    >;

    "VaultRemoved(address)": TypedContractEvent<
      VaultRemovedEvent.InputTuple,
      VaultRemovedEvent.OutputTuple,
      VaultRemovedEvent.OutputObject
    >;
    VaultRemoved: TypedContractEvent<
      VaultRemovedEvent.InputTuple,
      VaultRemovedEvent.OutputTuple,
      VaultRemovedEvent.OutputObject
    >;

    "WantTokenAdded(address,string,bool)": TypedContractEvent<
      WantTokenAddedEvent.InputTuple,
      WantTokenAddedEvent.OutputTuple,
      WantTokenAddedEvent.OutputObject
    >;
    WantTokenAdded: TypedContractEvent<
      WantTokenAddedEvent.InputTuple,
      WantTokenAddedEvent.OutputTuple,
      WantTokenAddedEvent.OutputObject
    >;

    "WantTokenDisabled(address)": TypedContractEvent<
      WantTokenDisabledEvent.InputTuple,
      WantTokenDisabledEvent.OutputTuple,
      WantTokenDisabledEvent.OutputObject
    >;
    WantTokenDisabled: TypedContractEvent<
      WantTokenDisabledEvent.InputTuple,
      WantTokenDisabledEvent.OutputTuple,
      WantTokenDisabledEvent.OutputObject
    >;

    "WantTokenEnabled(address)": TypedContractEvent<
      WantTokenEnabledEvent.InputTuple,
      WantTokenEnabledEvent.OutputTuple,
      WantTokenEnabledEvent.OutputObject
    >;
    WantTokenEnabled: TypedContractEvent<
      WantTokenEnabledEvent.InputTuple,
      WantTokenEnabledEvent.OutputTuple,
      WantTokenEnabledEvent.OutputObject
    >;

    "WantTokenRemoved(address)": TypedContractEvent<
      WantTokenRemovedEvent.InputTuple,
      WantTokenRemovedEvent.OutputTuple,
      WantTokenRemovedEvent.OutputObject
    >;
    WantTokenRemoved: TypedContractEvent<
      WantTokenRemovedEvent.InputTuple,
      WantTokenRemovedEvent.OutputTuple,
      WantTokenRemovedEvent.OutputObject
    >;

    "WantTokenRenamed(address,string,string)": TypedContractEvent<
      WantTokenRenamedEvent.InputTuple,
      WantTokenRenamedEvent.OutputTuple,
      WantTokenRenamedEvent.OutputObject
    >;
    WantTokenRenamed: TypedContractEvent<
      WantTokenRenamedEvent.InputTuple,
      WantTokenRenamedEvent.OutputTuple,
      WantTokenRenamedEvent.OutputObject
    >;
  };
}
