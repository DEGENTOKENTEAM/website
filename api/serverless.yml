service: dgnx-website
frameworkVersion: '2 || 3'

useDotenv: true

package:
  individually: true

plugins:
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-api-cloudfront

custom:
  defaultStage: dev
  currentStage: ${opt:stage, self:custom.defaultStage}
  serviceName: ${self:service}-${self:custom.currentStage}
  ddb:
    stages:
      - default
      - dev
    tableNames:
      dexscreenerPairCache: ${self:custom.serviceName}-dexscreenerPairCache
      dexscreenerTokenCache: ${self:custom.serviceName}-dexscreenerTokenCache
      coingeckoApiCache: ${self:custom.serviceName}-coingeckoApiCache
      stakexCustomization: ${self:custom.serviceName}-stakexCustomization
      stakexCustomizationV2: ${self:custom.serviceName}-stakexCustomizationV2
      stakexCampaigns: ${self:custom.serviceName}-stakexCampaigns
      stakexProtocols: ${self:custom.serviceName}-stakexProtocols
      stakexAnnualPercentageLogs: ${self:custom.serviceName}-stakexAnnualPercentageLogs
      stakexStakeLogs: ${self:custom.serviceName}-stakexStakeLogs
      stakexChainSync: ${self:custom.serviceName}-stakexChainSync
      stakexProtocolLogs: ${self:custom.serviceName}-stakexProtocolLogs
    deletionPolicy:
      default: Retain
      dev: Retain
      staging: Retain
      production: Retain
      productionv2: Retain
    updateReplacePolicy:
      default: Retain
      dev: Retain
      staging: Retain
      production: Retain
      productionv2: Retain
  corsAllowedOrigin:
    dev: http://localhost:3000
    staging: https://staging.dgnx.finance
    # production: https://dgnx.finance
    production: '*'
    productionv2: '*'
  webpack:
    isLocal: false
    # isLocal: true

provider:
  name: aws
  region: eu-west-1
  profile: dgnx
  stage: dev
  runtime: nodejs18.x

  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchWriteItem
          Resource:
            - 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.ddb.tableNames.dexscreenerPairCache}*'
            - 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.ddb.tableNames.dexscreenerTokenCache}*'
            - 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.ddb.tableNames.coingeckoApiCache}*'
            - 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.ddb.tableNames.stakexCustomization}*'
            - 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.ddb.tableNames.stakexCustomizationV2}*'
            - 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.ddb.tableNames.stakexCampaigns}*'
            - 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.ddb.tableNames.stakexProtocols}*'
            - 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.ddb.tableNames.stakexAnnualPercentageLogs}*'
            - 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.ddb.tableNames.stakexStakeLogs}*'
            - 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.ddb.tableNames.stakexChainSync}*'
            - 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.ddb.tableNames.stakexProtocolLogs}*'

        - Effect: 'Allow'
          Action:
            - lambda:InvokeAsync
            - lambda:InvokeFunction
          Resource:
            - '*'

  environment:
    DB_TABLE_NAME_DEXSCREENER_PAIR_CACHE: ${self:custom.ddb.tableNames.dexscreenerPairCache}
    DB_TABLE_NAME_DEXSCREENER_TOKEN_CACHE: ${self:custom.ddb.tableNames.dexscreenerTokenCache}
    DB_TABLE_NAME_COINGECKO_API_CACHE: ${self:custom.ddb.tableNames.coingeckoApiCache}
    DB_TABLE_NAME_COINGECKO_API_CACHE_TTL: 2628000 # 1 month
    DB_TABLE_NAME_STAKEX_CUSTOMIZATION: ${self:custom.ddb.tableNames.stakexCustomization}
    DB_TABLE_NAME_STAKEX_CUSTOMIZATION_V2: ${self:custom.ddb.tableNames.stakexCustomizationV2}
    DB_TABLE_NAME_STAKEX_PROTOCOLS: ${self:custom.ddb.tableNames.stakexProtocols}
    DB_TABLE_NAME_STAKEX_CAMPAIGNS: ${self:custom.ddb.tableNames.stakexCampaigns}
    DB_TABLE_NAME_STAKEX_ANNUAL_PERCENTAGE_LOGS: ${self:custom.ddb.tableNames.stakexAnnualPercentageLogs}
    DB_TABLE_NAME_STAKEX_STAKE_LOGS: ${self:custom.ddb.tableNames.stakexStakeLogs}
    DB_TABLE_NAME_STAKEX_CHAIN_SYNC: ${self:custom.ddb.tableNames.stakexChainSync}
    DB_TABLE_NAME_STAKEX_PROTOCOL_LOGS: ${self:custom.ddb.tableNames.stakexProtocolLogs}
    CORS_ALLOWED_ORIGIN: ${self:custom.corsAllowedOrigin.${opt:stage, self:provider.stage}}
    SNOWTRACE_API_KEY: ${env:SNOWTRACE_API_KEY}
    PINATA_API_KEY: ${env:PINATA_API_KEY}
    INFURA_ID: ${env:INFURA_ID}
    ANKR_API_KEY: ${env:ANKR_API_KEY}

functions:
  # Tasks
  migration20241122:
    handler: migrations/migration_20241122.handler
    timeout: 300

  # coingecko proxy
  coingeckoProxy:
    handler: coingeckoProxy/get.handler
    memorySize: 512
    timeout: 29
    events:
      - http:
          cors: true
          path: /coingecko/{proxyPath+}
          request:
            parameters:
              paths:
                proxyPath: true
          method: get

  # dexscreener proxy
  dexscreenerProxyLatestDexTokens:
    handler: dexscreenerProxy/latestDexTokens.handler
    memorySize: 512
    timeout: 29
    events:
      - http:
          path: /latest/dex/tokens/{tokenAddress}
          request:
            parameters:
              paths:
                tokenAddress: true
          method: get
          cors: true

  dexscreenerProxyLatestDexPairs:
    handler: dexscreenerProxy/latestDexPairs.handler
    memorySize: 512
    timeout: 29
    events:
      - http:
          path: /latest/dex/pairs/{network}/{pairAddress}
          request:
            parameters:
              paths:
                network: true
                pairAddress: true
          method: get
          cors: true

  # STAKEX API
  stakeXPeripheryUpdate:
    handler: stakex/periphery/update.handler
    memorySize: 512
    timeout: 29
    events:
      - http:
          path: /stakex/periphery/update
          method: post
          cors: true

  stakeXPeripheryGet:
    handler: stakex/periphery/get.handler
    memorySize: 512
    timeout: 29
    events:
      - http:
          path: /stakex/periphery/{chainId}/{protocol}
          request:
            parameters:
              paths:
                chainId: true
                protocol: true
          method: get
          cors: true

  stakexMetrics:
    name: ${self:custom.serviceName}-stakexMetrics
    handler: stakex/metrics.handler
    memorySize: 512
    timeout: 29
    events:
      - http:
          path: /stakex/metrics/{chainId}/{protocol}
          request:
            parameters:
              paths:
                chainId: true
                protocol: true
          method: get
          cors: true

  stakexProtocolsGet:
    name: ${self:custom.serviceName}-stakexProtocolsGet
    handler: stakex/protocols.handler
    timeout: 29
    events:
      - http:
          path: /stakex/protocols
          method: get
          cors: true
      - http:
          path: /stakex/protocols/{chainId}
          method: get
          cors: true
      - http:
          path: /stakex/protocols/account/{account}
          method: get
          cors: true

  stakexCampaignsGet:
    name: ${self:custom.serviceName}-stakexCampaignsGet
    handler: stakex/campaigns.handler
    timeout: 29
    events:
      - http:
          path: /stakex/campaigns
          method: get
          cors: true
      - http:
          path: /stakex/campaigns/{chainId}
          method: get
          cors: true
      - http:
          path: /stakex/campaigns/account/{account}
          method: get
          cors: true

  stakexCampaignsLiveData:
    name: ${self:custom.serviceName}-stakexCampaignsLiveData
    handler: stakex/campaigns-live-data.handler
    timeout: 29
    events:
      - http:
          path: /stakex/campaigns/live
          method: post
          cors: true

  stakexAccountInfo:
    name: ${self:custom.serviceName}-stakexAccountInfo
    handler: stakex/account-info.handler
    events:
      - http:
          path: /stakex/account-info/{account}
          request:
            parameters:
              paths:
                account: true
          method: get
          cors: true

  stakexUpdater:
    name: ${self:custom.serviceName}-stakexUpdater
    handler: stakex/updater.handler
    events:
      - http:
          path: /stakex/updater
          request:
            parameters:
              querystrings:
                protocol: true
                chainId: true
          method: get
          cors: true

  # STAKEX Automations
  autoCalculateAPR:
    handler: stakex/automations/calculations/calculate-apr.handler
    timeout: 120
    events:
      - schedule:
          rate: rate(10 minutes)
          enabled: true

  autoCalculateStakes:
    handler: stakex/automations/calculations/calculate-stakes.handler
    timeout: 120
    events:
      - schedule:
          rate: rate(10 minutes)
          enabled: true

  autoUpdateManifests:
    handler: stakex/automations/periphery/update-manifests.handler
    timeout: 120
    events:
      - schedule:
          rate: rate(1 minute)
          enabled: true

  autoAddNewProtocols:
    handler: stakex/automations/add-new-protocols.handler
    timeout: 120
    events:
      - schedule:
          rate: rate(5 minutes)
          enabled: true

  autoUpdateProtocolLogs:
    handler: stakex/automations/update-protocol-logs.handler
    timeout: 120
    events:
      - schedule:
          rate: rate(5 minutes)
          enabled: true

  autoUpdateProtocolStatus:
    handler: stakex/automations/update-protocol-status.handler
    timeout: 120
    events:
      - schedule:
          rate: rate(10 minutes)
          enabled: true

  autoUpdateCampaigns:
    handler: stakex/automations/update-campaigns.handler
    timeout: 120
    events:
      - schedule:
          rate: rate(10 minutes)
          enabled: true

resources:
  Resources:
    dexscreenerPairCacheTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: ${self:custom.ddb.deletionPolicy.${opt:stage, 'default'}}
      UpdateReplacePolicy: ${self:custom.ddb.updateReplacePolicy.${opt:stage, 'default'}}
      Properties:
        TableName: ${self:custom.ddb.tableNames.dexscreenerPairCache}
        AttributeDefinitions:
          - AttributeName: PairKey # network#pairAddress
            AttributeType: S
        KeySchema:
          - AttributeName: PairKey
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

    dexscreenerTokenCacheTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: ${self:custom.ddb.deletionPolicy.${opt:stage, 'default'}}
      UpdateReplacePolicy: ${self:custom.ddb.updateReplacePolicy.${opt:stage, 'default'}}
      Properties:
        TableName: ${self:custom.ddb.tableNames.dexscreenerTokenCache}
        AttributeDefinitions:
          - AttributeName: TokenKey
            AttributeType: S
        KeySchema:
          - AttributeName: TokenKey
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

    coingeckoApiCacheTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: ${self:custom.ddb.deletionPolicy.${opt:stage, 'default'}}
      UpdateReplacePolicy: ${self:custom.ddb.updateReplacePolicy.${opt:stage, 'default'}}
      Properties:
        TableName: ${self:custom.ddb.tableNames.coingeckoApiCache}
        AttributeDefinitions:
          - AttributeName: pkey
            AttributeType: S
          - AttributeName: skey # path/to/endpoint
            AttributeType: S
        KeySchema:
          - AttributeName: pkey
            KeyType: HASH
          - AttributeName: skey
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

    stakexCustomizationTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: ${self:custom.ddb.deletionPolicy.${opt:stage, 'default'}}
      UpdateReplacePolicy: ${self:custom.ddb.updateReplacePolicy.${opt:stage, 'default'}}
      Properties:
        TableName: ${self:custom.ddb.tableNames.stakexCustomization}
        AttributeDefinitions:
          - AttributeName: CustomizationKey # which is the protocol address
            AttributeType: S
          - AttributeName: logoIpfs
            AttributeType: S
        KeySchema:
          - AttributeName: CustomizationKey
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: logoIpfsIndex
            KeySchema:
              - AttributeName: logoIpfs
                KeyType: HASH
            Projection:
              ProjectionType: 'ALL'
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

    stakexCustomizationV2Table:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: ${self:custom.ddb.deletionPolicy.${opt:stage, 'default'}}
      UpdateReplacePolicy: ${self:custom.ddb.updateReplacePolicy.${opt:stage, 'default'}}
      Properties:
        TableName: ${self:custom.ddb.tableNames.stakexCustomizationV2}
        AttributeDefinitions:
          - AttributeName: pkey # version
            AttributeType: S
          - AttributeName: skey # chainId#protocol
            AttributeType: S
        KeySchema:
          - AttributeName: pkey
            KeyType: HASH
          - AttributeName: skey
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

    stakexCampaignsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: ${self:custom.ddb.deletionPolicy.${opt:stage, 'default'}}
      UpdateReplacePolicy: ${self:custom.ddb.updateReplacePolicy.${opt:stage, 'default'}}
      Properties:
        TableName: ${self:custom.ddb.tableNames.stakexCampaigns}
        AttributeDefinitions:
          - AttributeName: pkey # version
            AttributeType: S
          - AttributeName: skey # chainId#protocol#bucketId
            AttributeType: S
        KeySchema:
          - AttributeName: pkey
            KeyType: HASH
          - AttributeName: skey
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

    stakexProtocolsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: ${self:custom.ddb.deletionPolicy.${opt:stage, 'default'}}
      UpdateReplacePolicy: ${self:custom.ddb.updateReplacePolicy.${opt:stage, 'default'}}
      Properties:
        TableName: ${self:custom.ddb.tableNames.stakexProtocols}
        AttributeDefinitions:
          - AttributeName: pkey # version
            AttributeType: S
          - AttributeName: skey # chainId#protocol
            AttributeType: S
        KeySchema:
          - AttributeName: pkey
            KeyType: HASH
          - AttributeName: skey
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

    stakexAnnualPercentageLogsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: ${self:custom.ddb.deletionPolicy.${opt:stage, 'default'}}
      UpdateReplacePolicy: ${self:custom.ddb.updateReplacePolicy.${opt:stage, 'default'}}
      Properties:
        TableName: ${self:custom.ddb.tableNames.stakexAnnualPercentageLogs}
        AttributeDefinitions:
          - AttributeName: pkey
            AttributeType: S
          - AttributeName: skey
            AttributeType: S
          - AttributeName: protocol
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: pkey
            KeyType: HASH
          - AttributeName: skey
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ProtocolIndex
            KeySchema:
              - AttributeName: protocol
                KeyType: HASH
              - AttributeName: timestamp
                KeyType: RANGE
            Projection:
              ProjectionType: 'ALL'
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

    stakexStakeLogsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: ${self:custom.ddb.deletionPolicy.${opt:stage, 'default'}}
      UpdateReplacePolicy: ${self:custom.ddb.updateReplacePolicy.${opt:stage, 'default'}}
      Properties:
        TableName: ${self:custom.ddb.tableNames.stakexStakeLogs}
        AttributeDefinitions:
          - AttributeName: pkey
            AttributeType: S
          - AttributeName: skey
            AttributeType: S
          - AttributeName: protocol
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: pkey
            KeyType: HASH
          - AttributeName: skey
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ProtocolIndex
            KeySchema:
              - AttributeName: protocol
                KeyType: HASH
              - AttributeName: timestamp
                KeyType: RANGE
            Projection:
              ProjectionType: 'ALL'
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

    stakexChainSyncTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: ${self:custom.ddb.deletionPolicy.${opt:stage, 'default'}}
      UpdateReplacePolicy: ${self:custom.ddb.updateReplacePolicy.${opt:stage, 'default'}}
      Properties:
        TableName: ${self:custom.ddb.tableNames.stakexChainSync}
        AttributeDefinitions:
          - AttributeName: pkey
            AttributeType: S
          - AttributeName: skey
            AttributeType: N
        KeySchema:
          - AttributeName: pkey
            KeyType: HASH
          - AttributeName: skey
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

    stakexProtocolLogs:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: ${self:custom.ddb.deletionPolicy.${opt:stage, 'default'}}
      UpdateReplacePolicy: ${self:custom.ddb.updateReplacePolicy.${opt:stage, 'default'}}
      Properties:
        TableName: ${self:custom.ddb.tableNames.stakexProtocolLogs}
        AttributeDefinitions:
          - AttributeName: pkey
            AttributeType: S
          - AttributeName: skey # chainId#protocol#bucketId
            AttributeType: S
        KeySchema:
          - AttributeName: pkey
            KeyType: HASH
          - AttributeName: skey
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
