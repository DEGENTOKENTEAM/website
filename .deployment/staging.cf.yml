---
AWSTemplateFormatVersion: "2010-09-09"

Description: "Serve password protected development state of the DEGENX Ecosystem dapp through AWS"

Parameters:
  CustomBucketName:
    Type: String
    NoEcho: true

Resources:
  StagingBucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Ref CustomBucketName
      AccessControl: Private
  StagingBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref StagingBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "cloudfront.amazonaws.com"
            Action: 's3:GetObject'
            Resource: !Sub "${StagingBucket.Arn}/*"
            # CF Distribution ARNs have to be manually constructed
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${StagingDistribution}"
  StagingDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Origins:
          # Use regional, rather than global, domain for S3 bucket.
          - DomainName: !GetAtt StagingBucket.RegionalDomainName
            Id: StagingBucketWebsite                    
            S3OriginConfig:
              OriginAccessIdentity: "" # necessary
            OriginAccessControlId: !GetAtt StagingOriginAccessControl.Id
        Enabled: true
        DefaultRootObject: index.html
        CustomErrorResponses:
          # when there's a 403 error in the S3 origin, it means that the file is not found
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        DefaultCacheBehavior:
          # Default cache policy to disable caching.
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
          TargetOriginId: StagingBucketWebsite
          AllowedMethods:
            - HEAD
            - GET
            - OPTIONS
          Compress: true
          # Enforce HTTPS only
          ViewerProtocolPolicy: redirect-to-https
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !GetAtt StagingDeepLinkRedirectFunc.FunctionMetadata.FunctionARN
        PriceClass: PriceClass_100
  StagingOriginAccessControl:
    Type: "AWS::CloudFront::OriginAccessControl"
    Properties:
      OriginAccessControlConfig:
        Name: !Sub 'OAC-${CustomBucketName}'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
  StagingDeepLinkRedirectFunc:
    Type: "AWS::CloudFront::Function"
    Properties:
      AutoPublish: true
      FunctionCode: !Sub "
        async function handler(event) {
          const request = event.request; 
          const uri = request.uri;
          if (uri && (uri.match(/lps\\/stakex$/) || uri.match(/lps\\/stakex\\//))) request.uri = `/lps/stakex/index.html`; 
          if (uri && (uri.match(/dapp$/) || uri.match(/dapp\\//))) request.uri = `/dapp/index.html`; 
          return request;
        }"
      FunctionConfig:
        Comment: "Deep Link Redirect to CloudFront"
        Runtime: cloudfront-js-2.0
      Name: !Sub 'DeepLinkRedirect-${CustomBucketName}'

Outputs:
  StaticWebsiteHostname:
    Value: !GetAtt StagingDistribution.DomainName